{"ast":null,"code":"var _jsxFileName = \"/home/imentus/spl-token-wallet/src/components/BalancesList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport { refreshWalletPublicKeys, useBalanceInfo, useWallet, useWalletPublicKeys, useWalletSelector } from '../utils/wallet';\nimport { findAssociatedTokenAddress } from '../utils/tokens';\nimport LoadingIndicator from './LoadingIndicator';\nimport Collapse from '@material-ui/core/Collapse';\nimport { Typography } from '@material-ui/core';\nimport TokenInfoDialog from './TokenInfoDialog';\nimport FtxPayDialog from './FtxPay/FtxPayDialog';\nimport Link from '@material-ui/core/Link';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { abbreviateAddress, useIsExtensionWidth } from '../utils/utils';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport ReceiveIcon from '@material-ui/icons/WorkOutline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AddIcon from '@material-ui/icons/Add';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EditIcon from '@material-ui/icons/Edit';\nimport MergeType from '@material-ui/icons/MergeType';\nimport SortIcon from '@material-ui/icons/Sort';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddTokenDialog from './AddTokenDialog';\nimport ExportAccountDialog from './ExportAccountDialog';\nimport ftxPayIcon from './FtxPay/icon.png';\nimport SendDialog from './SendDialog';\nimport DepositDialog from './DepositDialog';\nimport { useIsProdNetwork, refreshAccountInfo, useGemachainExplorerUrlSuffix } from '../utils/connection';\nimport { useRegion } from '../utils/region';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { serumMarkets, priceStore } from '../utils/markets';\nimport { swapApiRequest } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport { showTokenInfoDialog } from '../utils/config';\nimport { useConnection } from '../utils/connection';\nimport { shortenAddress } from '../utils/utils';\nimport CloseTokenAccountDialog from './CloseTokenAccountButton';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport TokenIcon from './TokenIcon';\nimport EditAccountNameDialog from './EditAccountNameDialog';\nimport MergeAccountsDialog from './MergeAccountsDialog';\nimport SwapButton from './SwapButton';\nimport DnsIcon from '@material-ui/icons/Dns';\nimport DomainsList from './DomainsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst balanceFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n  useGrouping: true\n});\nconst SortAccounts = {\n  None: 0,\n  Ascending: 1,\n  Descending: 2\n}; // Aggregated $USD values of all child BalanceListItems child components.\n//\n// Values:\n// * undefined => loading.\n// * null => no market exists.\n// * float => done.\n//\n// For a given set of publicKeys, we know all the USD values have been loaded when\n// all of their values in this object are not `undefined`.\n\nconst usdValues = {}; // Calculating associated token addresses is an asynchronous operation, so we cache\n// the values so that we can quickly render components using them. This prevents\n// flickering for the associated token fingerprint icon.\n\nconst associatedTokensCache = {};\nconst numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\n\nfunction fairsIsLoaded(publicKeys) {\n  return publicKeys.filter(pk => usdValues[pk.toString()] !== undefined).length === publicKeys.length;\n}\n\nexport default function BalancesList() {\n  _s();\n\n  const wallet = useWallet();\n  const [publicKeys, loaded] = useWalletPublicKeys();\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(false);\n  const [showEditAccountNameDialog, setShowEditAccountNameDialog] = useState(false);\n  const [showMergeAccounts, setShowMergeAccounts] = useState(false);\n  const [showFtxPayDialog, setShowFtxPayDialog] = useState(false);\n  const [sortAccounts, setSortAccounts] = useState(SortAccounts.None);\n  const [showDomains, setShowDomains] = useState(false);\n  const {\n    accounts,\n    setAccountName\n  } = useWalletSelector();\n  const [isCopied, setIsCopied] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth(); // Dummy var to force rerenders on demand.\n\n  const [, setForceUpdate] = useState(false);\n  const region = useRegion();\n  const selectedAccount = accounts.find(a => a.isSelected);\n  const allTokensLoaded = loaded && fairsIsLoaded(publicKeys);\n  let sortedPublicKeys = publicKeys;\n\n  if (allTokensLoaded && sortAccounts !== SortAccounts.None) {\n    sortedPublicKeys = [...publicKeys];\n    sortedPublicKeys.sort((a, b) => {\n      const aVal = usdValues[a.toString()];\n      const bVal = usdValues[b.toString()];\n      a = aVal === undefined || aVal === null ? -1 : aVal;\n      b = bVal === undefined || bVal === null ? -1 : bVal;\n\n      if (sortAccounts === SortAccounts.Descending) {\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        } else {\n          return 0;\n        }\n      } else {\n        if (b < a) {\n          return -1;\n        } else if (b > a) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n  }\n\n  const totalUsdValue = publicKeys.filter(pk => usdValues[pk.toString()]).map(pk => usdValues[pk.toString()]).reduce((a, b) => a + b, 0.0); // Memoized callback and component for the `BalanceListItems`.\n  //\n  // The `BalancesList` fetches data, e.g., fairs for tokens using React hooks\n  // in each of the child `BalanceListItem` components. However, we want the\n  // parent component, to aggregate all of this data together, for example,\n  // to show the cumulative USD amount in the wallet.\n  //\n  // To achieve this, we need to pass a callback from the parent to the chlid,\n  // so that the parent can collect the results of all the async network requests.\n  // However, this can cause a render loop, since invoking the callback can cause\n  // the parent to rerender, which causese the child to rerender, which causes\n  // the callback to be invoked.\n  //\n  // To solve this, we memoize all the `BalanceListItem` children components.\n\n  const setUsdValuesCallback = useCallback((publicKey, usdValue) => {\n    if (usdValues[publicKey.toString()] !== usdValue) {\n      usdValues[publicKey.toString()] = usdValue;\n\n      if (fairsIsLoaded(publicKeys)) {\n        setForceUpdate(forceUpdate => !forceUpdate);\n      }\n    }\n  }, [publicKeys]);\n  const balanceListItemsMemo = useMemo(() => {\n    return sortedPublicKeys.map(pk => {\n      return /*#__PURE__*/React.memo(props => {\n        return /*#__PURE__*/_jsxDEV(BalanceListItem, {\n          publicKey: pk,\n          setUsdValue: setUsdValuesCallback\n        }, pk.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this);\n      });\n    });\n  }, [sortedPublicKeys, setUsdValuesCallback]);\n  const iconSize = isExtensionWidth ? 'small' : 'medium';\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      color: \"default\",\n      elevation: 1,\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: [/*#__PURE__*/_jsxDEV(CopyToClipboard, {\n          text: selectedAccount && selectedAccount.address.toBase58(),\n          onCopy: () => {\n            setIsCopied(true);\n            setTimeout(() => {\n              setIsCopied(false);\n            }, 1000);\n          },\n          children: /*#__PURE__*/_jsxDEV(Tooltip, {\n            title: /*#__PURE__*/_jsxDEV(Typography, {\n              children: isCopied ? 'Copied' : 'Copy to clipboard'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this),\n            style: {\n              fontSize: '10rem'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              style: {\n                flexGrow: 1,\n                fontSize: isExtensionWidth && '1rem',\n                cursor: 'pointer'\n              },\n              hover: true,\n              component: \"h2\",\n              children: [selectedAccount && selectedAccount.name, isExtensionWidth ? '' : ` (${selectedAccount && shortenAddress(selectedAccount.address.toBase58())})`, ' ', allTokensLoaded && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [\"(\", numberFormat.format(totalUsdValue.toFixed(2)), \")\"]\n              }, void 0, true)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), selectedAccount && selectedAccount.name !== 'Main account' && selectedAccount.name !== 'Hardware wallet' && /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Edit Account Name\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => setShowEditAccountNameDialog(true),\n            children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Deposit via FTX Pay\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => setShowFtxPayDialog(true),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              title: 'FTX Pay',\n              alt: 'FTX Pay',\n              style: {\n                width: 20,\n                height: 20\n              },\n              src: ftxPayIcon\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"See your domains\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => setShowDomains(true),\n            children: /*#__PURE__*/_jsxDEV(DnsIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DomainsList, {\n          open: showDomains,\n          setOpen: setShowDomains\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), region.result && !region.result.isRestricted && /*#__PURE__*/_jsxDEV(SwapButton, {\n          size: iconSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 60\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Migrate Tokens\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => setShowMergeAccounts(true),\n            children: /*#__PURE__*/_jsxDEV(MergeType, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 283,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Add Token\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => setShowAddTokenDialog(true),\n            children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Sort Tokens\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => {\n              switch (sortAccounts) {\n                case SortAccounts.None:\n                  setSortAccounts(SortAccounts.Ascending);\n                  return;\n\n                case SortAccounts.Ascending:\n                  setSortAccounts(SortAccounts.Descending);\n                  return;\n\n                case SortAccounts.Descending:\n                  setSortAccounts(SortAccounts.None);\n                  return;\n\n                default:\n                  console.error('invalid sort type', sortAccounts);\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(SortIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          title: \"Refresh\",\n          arrow: true,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            size: iconSize,\n            onClick: () => {\n              refreshWalletPublicKeys(wallet);\n              publicKeys.map(publicKey => refreshAccountInfo(wallet.connection, publicKey, true));\n            },\n            style: {\n              marginRight: -12\n            },\n            children: /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(List, {\n      disablePadding: true,\n      children: [balanceListItemsMemo.map(Memoized => /*#__PURE__*/_jsxDEV(Memoized, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 11\n      }, this)), loaded ? null : /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddTokenDialog, {\n      open: showAddTokenDialog,\n      onClose: () => setShowAddTokenDialog(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FtxPayDialog, {\n      open: showFtxPayDialog,\n      publicKeys: publicKeys,\n      onClose: () => setShowFtxPayDialog(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditAccountNameDialog, {\n      open: showEditAccountNameDialog,\n      onClose: () => setShowEditAccountNameDialog(false),\n      oldName: selectedAccount ? selectedAccount.name : '',\n      onEdit: name => {\n        setAccountName(selectedAccount.selector, name);\n        setShowEditAccountNameDialog(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MergeAccountsDialog, {\n      open: showMergeAccounts,\n      onClose: () => setShowMergeAccounts(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BalancesList, \"ZUEek1MuvqInHLSnLuR3MJmUbq0=\", false, function () {\n  return [useWallet, useWalletPublicKeys, useWalletSelector, useIsExtensionWidth, useRegion];\n});\n\n_c = BalancesList;\nconst useStyles = makeStyles(theme => ({\n  address: {\n    textOverflow: 'ellipsis',\n    overflowX: 'hidden'\n  },\n  itemDetails: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    marginBottom: theme.spacing(2)\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  viewDetails: {\n    '&:hover': {\n      cursor: 'pointer'\n    }\n  }\n}));\nexport function BalanceListItem(_ref) {\n  _s2();\n\n  var _tokenName;\n\n  let {\n    publicKey,\n    expandable,\n    setUsdValue\n  } = _ref;\n  const wallet = useWallet();\n  const balanceInfo = useBalanceInfo(publicKey);\n  const classes = useStyles();\n  const connection = useConnection();\n  const [open, setOpen] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth();\n  const [, setForceUpdate] = useState(false); // Valid states:\n  //   * undefined => loading.\n  //   * null => not found.\n  //   * else => price is loaded.\n\n  const [price, setPrice] = useState(undefined);\n  useEffect(() => {\n    if (balanceInfo) {\n      if (balanceInfo.tokenSymbol) {\n        const coin = balanceInfo.tokenSymbol.toUpperCase(); // Don't fetch USD stable coins. Mark to 1 USD.\n\n        if (coin === 'USDT' || coin === 'USDC') {\n          setPrice(1);\n        } // A Serum market exists. Fetch the price.\n        else if (serumMarkets[coin]) {\n          let m = serumMarkets[coin];\n          priceStore.getPrice(connection, m.name).then(price => {\n            setPrice(price);\n          }).catch(err => {\n            console.error(err);\n            setPrice(null);\n          });\n        } // No Serum market exists.\n        else {\n          setPrice(null);\n        }\n      } // No token symbol so don't fetch market data.\n      else {\n        setPrice(null);\n      }\n    }\n  }, [price, balanceInfo, connection]);\n  expandable = expandable === undefined ? true : expandable;\n\n  if (!balanceInfo) {\n    return /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n      delay: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 12\n    }, this);\n  }\n\n  let {\n    amount,\n    decimals,\n    mint,\n    tokenName,\n    tokenSymbol,\n    tokenLogoUri\n  } = balanceInfo;\n  tokenName = (_tokenName = tokenName) !== null && _tokenName !== void 0 ? _tokenName : abbreviateAddress(mint);\n  let displayName;\n\n  if (isExtensionWidth) {\n    displayName = tokenSymbol !== null && tokenSymbol !== void 0 ? tokenSymbol : tokenName;\n  } else {\n    displayName = tokenName + (tokenSymbol ? ` (${tokenSymbol})` : '');\n  } // Fetch and cache the associated token address.\n\n\n  if (wallet && wallet.publicKey && mint) {\n    if (associatedTokensCache[wallet.publicKey.toString()] === undefined || associatedTokensCache[wallet.publicKey.toString()][mint.toString()] === undefined) {\n      findAssociatedTokenAddress(wallet.publicKey, mint).then(assocTok => {\n        let walletAccounts = Object.assign({}, associatedTokensCache[wallet.publicKey.toString()]);\n        walletAccounts[mint.toString()] = assocTok;\n        associatedTokensCache[wallet.publicKey.toString()] = walletAccounts;\n\n        if (assocTok.equals(publicKey)) {\n          // Force a rerender now that we've cached the value.\n          setForceUpdate(forceUpdate => !forceUpdate);\n        }\n      });\n    }\n  } // undefined => not loaded.\n\n\n  let isAssociatedToken = mint ? undefined : false;\n\n  if (wallet && wallet.publicKey && mint && associatedTokensCache[wallet.publicKey.toString()]) {\n    let acc = associatedTokensCache[wallet.publicKey.toString()][mint.toString()];\n\n    if (acc) {\n      if (acc.equals(publicKey)) {\n        isAssociatedToken = true;\n      } else {\n        isAssociatedToken = false;\n      }\n    }\n  }\n\n  const subtitle = isExtensionWidth || !publicKey.equals(balanceInfo.owner) ? undefined : /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      height: '20px',\n      overflow: 'hidden'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column'\n      },\n      children: publicKey.toBase58()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 498,\n    columnNumber: 7\n  }, this);\n  const usdValue = price === undefined // Not yet loaded.\n  ? undefined : price === null // Loaded and empty.\n  ? null : (amount / Math.pow(10, decimals) * price).toFixed(2); // Loaded.\n\n  if (setUsdValue && usdValue !== undefined) {\n    setUsdValue(publicKey, usdValue === null ? null : parseFloat(usdValue));\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ListItem, {\n      button: true,\n      onClick: () => expandable && setOpen(open => !open),\n      children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n        children: /*#__PURE__*/_jsxDEV(TokenIcon, {\n          mint: mint,\n          tokenName: tokenName,\n          url: tokenLogoUri,\n          size: 28\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [balanceFormat.format(amount / Math.pow(10, decimals)), ' ', displayName]\n          }, void 0, true),\n          secondary: subtitle,\n          secondaryTypographyProps: {\n            className: classes.address\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column'\n          },\n          children: price && /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"textSecondary\",\n            children: numberFormat.format(usdValue)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }, this), expandable ? open ? /*#__PURE__*/_jsxDEV(ExpandLess, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(ExpandMore, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 47\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this), expandable && /*#__PURE__*/_jsxDEV(Collapse, {\n      in: open,\n      timeout: \"auto\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(BalanceListItemDetails, {\n        isAssociatedToken: isAssociatedToken,\n        publicKey: publicKey,\n        serumMarkets: serumMarkets,\n        balanceInfo: balanceInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(BalanceListItem, \"Hrfd84COwnSZjCOTUnRdna8oWIE=\", false, function () {\n  return [useWallet, useBalanceInfo, useStyles, useConnection, useIsExtensionWidth];\n});\n\n_c2 = BalanceListItem;\n\nfunction BalanceListItemDetails(_ref2) {\n  _s3();\n\n  var _balanceInfo$mint2;\n\n  let {\n    publicKey,\n    serumMarkets,\n    balanceInfo,\n    isAssociatedToken\n  } = _ref2;\n  const urlSuffix = useGemachainExplorerUrlSuffix();\n  const classes = useStyles();\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [tokenInfoDialogOpen, setTokenInfoDialogOpen] = useState(false);\n  const [exportAccDialogOpen, setExportAccDialogOpen] = useState(false);\n  const [closeTokenAccountDialogOpen, setCloseTokenAccountDialogOpen] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const wallet = useWallet();\n  const isProdNetwork = useIsProdNetwork();\n  const [swapInfo] = useAsyncData(async () => {\n    var _balanceInfo$mint;\n\n    if (!showSwapAddress || !isProdNetwork) {\n      return null;\n    }\n\n    return await swapApiRequest('POST', 'swap_to', {\n      blockchain: 'gema',\n      coin: (_balanceInfo$mint = balanceInfo.mint) === null || _balanceInfo$mint === void 0 ? void 0 : _balanceInfo$mint.toBase58(),\n      address: publicKey.toBase58()\n    }, {\n      ignoreUserErrors: true\n    });\n  }, ['swapInfo', isProdNetwork, (_balanceInfo$mint2 = balanceInfo.mint) === null || _balanceInfo$mint2 === void 0 ? void 0 : _balanceInfo$mint2.toBase58(), publicKey.toBase58()]);\n  const isExtensionWidth = useIsExtensionWidth();\n\n  if (!balanceInfo) {\n    return /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n      delay: 0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 12\n    }, this);\n  }\n\n  let {\n    mint,\n    tokenName,\n    tokenSymbol,\n    owner,\n    amount\n  } = balanceInfo; // Only show the export UI for the native GEMA coin.\n\n  const exportNeedsDisplay = mint === null && tokenName === 'GEMA' && tokenSymbol === 'GEMA';\n  const market = tokenSymbol ? serumMarkets[tokenSymbol.toUpperCase()] ? serumMarkets[tokenSymbol.toUpperCase()].publicKey : undefined : undefined;\n  const isSolAddress = publicKey.equals(owner);\n  const additionalInfo = isExtensionWidth ? undefined : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      children: [\"Token Name: \", tokenName !== null && tokenName !== void 0 ? tokenName : 'Unknown']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 632,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body2\",\n      children: [\"Token Symbol: \", tokenSymbol !== null && tokenSymbol !== void 0 ? tokenSymbol : 'Unknown']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [!isSolAddress && isAssociatedToken === false && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: \"This is an auxiliary token account.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 641,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: `https://solscan.io/account/${publicKey.toBase58()}` + urlSuffix,\n            target: \"_blank\",\n            rel: \"noopener\",\n            children: \"View on Solscan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 11\n        }, this), market && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: `https://dex.projectserum.com/#/market/${market}`,\n            target: \"_blank\",\n            rel: \"noopener\",\n            children: \"View on Serum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 13\n        }, this), swapInfo && swapInfo.coin.erc20Contract && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: `https://etherscan.io/token/${swapInfo.coin.erc20Contract}` + urlSuffix,\n            target: \"_blank\",\n            rel: \"noopener\",\n            children: \"View on Ethereum\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 669,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 13\n        }, this), !isSolAddress && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            className: classes.viewDetails,\n            onClick: () => setShowDetails(!showDetails),\n            children: \"View Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 13\n        }, this), showDetails && (mint ? /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          className: classes.address,\n          children: [\"Mint Address: \", mint.toBase58()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 15\n        }, this) : null), !isSolAddress && showDetails && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          className: classes.address,\n          children: [isAssociatedToken ? 'Associated' : '', \" Token Metadata:\", ' ', publicKey.toBase58()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 9\n      }, this), exportNeedsDisplay && wallet.allowsExport && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: '#',\n            onClick: e => setExportAccDialogOpen(true),\n            children: \"Export\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 706,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [wallet.allowsExport && /*#__PURE__*/_jsxDEV(ExportAccountDialog, {\n      onClose: () => setExportAccDialogOpen(false),\n      open: exportAccDialogOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.itemDetails,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.buttonContainer,\n        children: [!publicKey.equals(owner) && showTokenInfoDialog ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"default\",\n          startIcon: /*#__PURE__*/_jsxDEV(InfoIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 26\n          }, this),\n          onClick: () => setTokenInfoDialogOpen(true),\n          children: \"Token Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(ReceiveIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 24\n          }, this),\n          onClick: () => setDepositDialogOpen(true),\n          children: \"Receive\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"primary\",\n          startIcon: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 24\n          }, this),\n          onClick: () => setSendDialogOpen(true),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 11\n        }, this), localStorage.getItem('warning-close-account') && mint && amount === 0 ? /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          color: \"secondary\",\n          size: \"small\",\n          startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 26\n          }, this),\n          onClick: () => setCloseTokenAccountDialogOpen(true),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 9\n      }, this), additionalInfo]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SendDialog, {\n      open: sendDialogOpen,\n      onClose: () => setSendDialogOpen(false),\n      balanceInfo: balanceInfo,\n      publicKey: publicKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 769,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DepositDialog, {\n      open: depositDialogOpen,\n      onClose: () => setDepositDialogOpen(false),\n      balanceInfo: balanceInfo,\n      publicKey: publicKey,\n      swapInfo: swapInfo,\n      isAssociatedToken: isAssociatedToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TokenInfoDialog, {\n      open: tokenInfoDialogOpen,\n      onClose: () => setTokenInfoDialogOpen(false),\n      balanceInfo: balanceInfo,\n      publicKey: publicKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 783,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CloseTokenAccountDialog, {\n      open: closeTokenAccountDialogOpen,\n      onClose: () => setCloseTokenAccountDialogOpen(false),\n      balanceInfo: balanceInfo,\n      publicKey: publicKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s3(BalanceListItemDetails, \"T5EhdfGRg7WZ2onsUVp2w0jvt4A=\", false, function () {\n  return [useGemachainExplorerUrlSuffix, useStyles, useWallet, useIsProdNetwork, useAsyncData, useIsExtensionWidth];\n});\n\n_c3 = BalanceListItemDetails;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"BalancesList\");\n$RefreshReg$(_c2, \"BalanceListItem\");\n$RefreshReg$(_c3, \"BalanceListItemDetails\");","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/components/BalancesList.js"],"names":["React","useState","useMemo","useCallback","useEffect","List","ListItem","ListItemText","Paper","refreshWalletPublicKeys","useBalanceInfo","useWallet","useWalletPublicKeys","useWalletSelector","findAssociatedTokenAddress","LoadingIndicator","Collapse","Typography","TokenInfoDialog","FtxPayDialog","Link","ExpandLess","ExpandMore","makeStyles","abbreviateAddress","useIsExtensionWidth","Button","SendIcon","ReceiveIcon","AppBar","Toolbar","AddIcon","RefreshIcon","IconButton","InfoIcon","Tooltip","EditIcon","MergeType","SortIcon","DeleteIcon","AddTokenDialog","ExportAccountDialog","ftxPayIcon","SendDialog","DepositDialog","useIsProdNetwork","refreshAccountInfo","useGemachainExplorerUrlSuffix","useRegion","CopyToClipboard","serumMarkets","priceStore","swapApiRequest","showSwapAddress","useAsyncData","showTokenInfoDialog","useConnection","shortenAddress","CloseTokenAccountDialog","ListItemIcon","TokenIcon","EditAccountNameDialog","MergeAccountsDialog","SwapButton","DnsIcon","DomainsList","balanceFormat","Intl","NumberFormat","undefined","minimumFractionDigits","maximumFractionDigits","useGrouping","SortAccounts","None","Ascending","Descending","usdValues","associatedTokensCache","numberFormat","style","currency","fairsIsLoaded","publicKeys","filter","pk","toString","length","BalancesList","wallet","loaded","showAddTokenDialog","setShowAddTokenDialog","showEditAccountNameDialog","setShowEditAccountNameDialog","showMergeAccounts","setShowMergeAccounts","showFtxPayDialog","setShowFtxPayDialog","sortAccounts","setSortAccounts","showDomains","setShowDomains","accounts","setAccountName","isCopied","setIsCopied","isExtensionWidth","setForceUpdate","region","selectedAccount","find","a","isSelected","allTokensLoaded","sortedPublicKeys","sort","b","aVal","bVal","totalUsdValue","map","reduce","setUsdValuesCallback","publicKey","usdValue","forceUpdate","balanceListItemsMemo","memo","props","iconSize","address","toBase58","setTimeout","fontSize","flexGrow","cursor","name","format","toFixed","width","height","result","isRestricted","console","error","connection","marginRight","Memoized","selector","useStyles","theme","textOverflow","overflowX","itemDetails","marginLeft","spacing","marginBottom","buttonContainer","display","justifyContent","marginTop","viewDetails","BalanceListItem","expandable","setUsdValue","balanceInfo","classes","open","setOpen","price","setPrice","tokenSymbol","coin","toUpperCase","m","getPrice","then","catch","err","amount","decimals","mint","tokenName","tokenLogoUri","displayName","assocTok","walletAccounts","Object","assign","equals","isAssociatedToken","acc","subtitle","owner","overflow","flexDirection","Math","pow","parseFloat","flex","className","BalanceListItemDetails","urlSuffix","sendDialogOpen","setSendDialogOpen","depositDialogOpen","setDepositDialogOpen","tokenInfoDialogOpen","setTokenInfoDialogOpen","exportAccDialogOpen","setExportAccDialogOpen","closeTokenAccountDialogOpen","setCloseTokenAccountDialogOpen","showDetails","setShowDetails","isProdNetwork","swapInfo","blockchain","ignoreUserErrors","exportNeedsDisplay","market","isSolAddress","additionalInfo","erc20Contract","allowsExport","e","localStorage","getItem"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet,\n  useWalletPublicKeys,\n  useWalletSelector,\n} from '../utils/wallet';\nimport { findAssociatedTokenAddress } from '../utils/tokens';\nimport LoadingIndicator from './LoadingIndicator';\nimport Collapse from '@material-ui/core/Collapse';\nimport { Typography } from '@material-ui/core';\nimport TokenInfoDialog from './TokenInfoDialog';\nimport FtxPayDialog from './FtxPay/FtxPayDialog';\nimport Link from '@material-ui/core/Link';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { abbreviateAddress, useIsExtensionWidth } from '../utils/utils';\nimport Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport ReceiveIcon from '@material-ui/icons/WorkOutline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport AddIcon from '@material-ui/icons/Add';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoIcon from '@material-ui/icons/InfoOutlined';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EditIcon from '@material-ui/icons/Edit';\nimport MergeType from '@material-ui/icons/MergeType';\nimport SortIcon from '@material-ui/icons/Sort';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddTokenDialog from './AddTokenDialog';\nimport ExportAccountDialog from './ExportAccountDialog';\nimport ftxPayIcon from './FtxPay/icon.png';\nimport SendDialog from './SendDialog';\nimport DepositDialog from './DepositDialog';\nimport {\n  useIsProdNetwork,\n  refreshAccountInfo,\n  useGemachainExplorerUrlSuffix,\n} from '../utils/connection';\nimport { useRegion } from '../utils/region';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { serumMarkets, priceStore } from '../utils/markets';\nimport { swapApiRequest } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport { showTokenInfoDialog } from '../utils/config';\nimport { useConnection } from '../utils/connection';\nimport { shortenAddress } from '../utils/utils';\nimport CloseTokenAccountDialog from './CloseTokenAccountButton';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport TokenIcon from './TokenIcon';\nimport EditAccountNameDialog from './EditAccountNameDialog';\nimport MergeAccountsDialog from './MergeAccountsDialog';\nimport SwapButton from './SwapButton';\nimport DnsIcon from '@material-ui/icons/Dns';\nimport DomainsList from './DomainsList';\n\nconst balanceFormat = new Intl.NumberFormat(undefined, {\n  minimumFractionDigits: 4,\n  maximumFractionDigits: 4,\n  useGrouping: true,\n});\n\nconst SortAccounts = {\n  None: 0,\n  Ascending: 1,\n  Descending: 2,\n};\n\n// Aggregated $USD values of all child BalanceListItems child components.\n//\n// Values:\n// * undefined => loading.\n// * null => no market exists.\n// * float => done.\n//\n// For a given set of publicKeys, we know all the USD values have been loaded when\n// all of their values in this object are not `undefined`.\nconst usdValues = {};\n\n// Calculating associated token addresses is an asynchronous operation, so we cache\n// the values so that we can quickly render components using them. This prevents\n// flickering for the associated token fingerprint icon.\nconst associatedTokensCache = {};\n\nconst numberFormat = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n});\n\nfunction fairsIsLoaded(publicKeys) {\n  return (\n    publicKeys.filter((pk) => usdValues[pk.toString()] !== undefined).length ===\n    publicKeys.length\n  );\n}\n\nexport default function BalancesList() {\n  const wallet = useWallet();\n  const [publicKeys, loaded] = useWalletPublicKeys();\n  const [showAddTokenDialog, setShowAddTokenDialog] = useState(false);\n  const [showEditAccountNameDialog, setShowEditAccountNameDialog] = useState(\n    false,\n  );\n  const [showMergeAccounts, setShowMergeAccounts] = useState(false);\n  const [showFtxPayDialog, setShowFtxPayDialog] = useState(false);\n  const [sortAccounts, setSortAccounts] = useState(SortAccounts.None);\n  const [showDomains, setShowDomains] = useState(false);\n  const { accounts, setAccountName } = useWalletSelector();\n  const [isCopied, setIsCopied] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth();\n  // Dummy var to force rerenders on demand.\n  const [, setForceUpdate] = useState(false);\n  const region = useRegion();\n  const selectedAccount = accounts.find((a) => a.isSelected);\n  const allTokensLoaded = loaded && fairsIsLoaded(publicKeys);\n  let sortedPublicKeys = publicKeys;\n  if (allTokensLoaded && sortAccounts !== SortAccounts.None) {\n    sortedPublicKeys = [...publicKeys];\n    sortedPublicKeys.sort((a, b) => {\n      const aVal = usdValues[a.toString()];\n      const bVal = usdValues[b.toString()];\n\n      a = aVal === undefined || aVal === null ? -1 : aVal;\n      b = bVal === undefined || bVal === null ? -1 : bVal;\n      if (sortAccounts === SortAccounts.Descending) {\n        if (a < b) {\n          return -1;\n        } else if (a > b) {\n          return 1;\n        } else {\n          return 0;\n        }\n      } else {\n        if (b < a) {\n          return -1;\n        } else if (b > a) {\n          return 1;\n        } else {\n          return 0;\n        }\n      }\n    });\n  }\n  const totalUsdValue = publicKeys\n    .filter((pk) => usdValues[pk.toString()])\n    .map((pk) => usdValues[pk.toString()])\n    .reduce((a, b) => a + b, 0.0);\n\n  // Memoized callback and component for the `BalanceListItems`.\n  //\n  // The `BalancesList` fetches data, e.g., fairs for tokens using React hooks\n  // in each of the child `BalanceListItem` components. However, we want the\n  // parent component, to aggregate all of this data together, for example,\n  // to show the cumulative USD amount in the wallet.\n  //\n  // To achieve this, we need to pass a callback from the parent to the chlid,\n  // so that the parent can collect the results of all the async network requests.\n  // However, this can cause a render loop, since invoking the callback can cause\n  // the parent to rerender, which causese the child to rerender, which causes\n  // the callback to be invoked.\n  //\n  // To solve this, we memoize all the `BalanceListItem` children components.\n  const setUsdValuesCallback = useCallback(\n    (publicKey, usdValue) => {\n      if (usdValues[publicKey.toString()] !== usdValue) {\n        usdValues[publicKey.toString()] = usdValue;\n        if (fairsIsLoaded(publicKeys)) {\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      }\n    },\n    [publicKeys],\n  );\n  const balanceListItemsMemo = useMemo(() => {\n    return sortedPublicKeys.map((pk) => {\n      return React.memo((props) => {\n        return (\n          <BalanceListItem\n            key={pk.toString()}\n            publicKey={pk}\n            setUsdValue={setUsdValuesCallback}\n          />\n        );\n      });\n    });\n  }, [sortedPublicKeys, setUsdValuesCallback]);\n\n  const iconSize = isExtensionWidth ? 'small' : 'medium';\n\n  return (\n    <Paper>\n      <AppBar position=\"static\" color=\"default\" elevation={1}>\n        <Toolbar>\n          <CopyToClipboard\n            text={selectedAccount && selectedAccount.address.toBase58()}\n            onCopy={() => {\n              setIsCopied(true);\n              setTimeout(() => {\n                setIsCopied(false);\n              }, 1000);\n            }}\n          >\n            <Tooltip\n              title={\n                <Typography>\n                  {isCopied ? 'Copied' : 'Copy to clipboard'}\n                </Typography>\n              }\n              style={{ fontSize: '10rem' }}\n            >\n              <Typography\n                variant=\"h6\"\n                style={{\n                  flexGrow: 1,\n                  fontSize: isExtensionWidth && '1rem',\n                  cursor: 'pointer',\n                }}\n                hover={true}\n                component=\"h2\"\n              >\n                {selectedAccount && selectedAccount.name}\n                {isExtensionWidth\n                  ? ''\n                  : ` (${\n                      selectedAccount &&\n                      shortenAddress(selectedAccount.address.toBase58())\n                    })`}{' '}\n                {allTokensLoaded && (\n                  <>({numberFormat.format(totalUsdValue.toFixed(2))})</>\n                )}\n              </Typography>\n            </Tooltip>\n          </CopyToClipboard>\n          {selectedAccount &&\n            selectedAccount.name !== 'Main account' &&\n            selectedAccount.name !== 'Hardware wallet' && (\n              <Tooltip title=\"Edit Account Name\" arrow>\n                <IconButton\n                  size={iconSize}\n                  onClick={() => setShowEditAccountNameDialog(true)}\n                >\n                  <EditIcon />\n                </IconButton>\n              </Tooltip>\n            )}\n          <Tooltip title=\"Deposit via FTX Pay\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowFtxPayDialog(true)}\n            >\n              <img\n                title={'FTX Pay'}\n                alt={'FTX Pay'}\n                style={{\n                  width: 20,\n                  height: 20,\n                }}\n                src={ftxPayIcon}\n              />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"See your domains\" arrow>\n            <IconButton size={iconSize} onClick={() => setShowDomains(true)}>\n              <DnsIcon />\n            </IconButton>\n          </Tooltip>\n          <DomainsList open={showDomains} setOpen={setShowDomains} />\n          {region.result && !region.result.isRestricted && <SwapButton size={iconSize} />}\n          <Tooltip title=\"Migrate Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowMergeAccounts(true)}\n            >\n              <MergeType />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Add Token\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => setShowAddTokenDialog(true)}\n            >\n              <AddIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Sort Tokens\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                switch (sortAccounts) {\n                  case SortAccounts.None:\n                    setSortAccounts(SortAccounts.Ascending);\n                    return;\n                  case SortAccounts.Ascending:\n                    setSortAccounts(SortAccounts.Descending);\n                    return;\n                  case SortAccounts.Descending:\n                    setSortAccounts(SortAccounts.None);\n                    return;\n                  default:\n                    console.error('invalid sort type', sortAccounts);\n                }\n              }}\n            >\n              <SortIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Refresh\" arrow>\n            <IconButton\n              size={iconSize}\n              onClick={() => {\n                refreshWalletPublicKeys(wallet);\n                publicKeys.map((publicKey) =>\n                  refreshAccountInfo(wallet.connection, publicKey, true),\n                );\n              }}\n              style={{ marginRight: -12 }}\n            >\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n        </Toolbar>\n      </AppBar>\n      <List disablePadding>\n        {balanceListItemsMemo.map((Memoized) => (\n          <Memoized />\n        ))}\n        {loaded ? null : <LoadingIndicator />}\n      </List>\n      <AddTokenDialog\n        open={showAddTokenDialog}\n        onClose={() => setShowAddTokenDialog(false)}\n      />\n      <FtxPayDialog\n        open={showFtxPayDialog}\n        publicKeys={publicKeys}\n        onClose={() => setShowFtxPayDialog(false)}\n      />\n      <EditAccountNameDialog\n        open={showEditAccountNameDialog}\n        onClose={() => setShowEditAccountNameDialog(false)}\n        oldName={selectedAccount ? selectedAccount.name : ''}\n        onEdit={(name) => {\n          setAccountName(selectedAccount.selector, name);\n          setShowEditAccountNameDialog(false);\n        }}\n      />\n      <MergeAccountsDialog\n        open={showMergeAccounts}\n        onClose={() => setShowMergeAccounts(false)}\n      />\n    </Paper>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  address: {\n    textOverflow: 'ellipsis',\n    overflowX: 'hidden',\n  },\n  itemDetails: {\n    marginLeft: theme.spacing(3),\n    marginRight: theme.spacing(3),\n    marginBottom: theme.spacing(2),\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-evenly',\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  viewDetails: {\n    '&:hover': {\n      cursor: 'pointer',\n    },\n  },\n}));\n\nexport function BalanceListItem({ publicKey, expandable, setUsdValue }) {\n  const wallet = useWallet();\n  const balanceInfo = useBalanceInfo(publicKey);\n  const classes = useStyles();\n  const connection = useConnection();\n  const [open, setOpen] = useState(false);\n  const isExtensionWidth = useIsExtensionWidth();\n  const [, setForceUpdate] = useState(false);\n  // Valid states:\n  //   * undefined => loading.\n  //   * null => not found.\n  //   * else => price is loaded.\n  const [price, setPrice] = useState(undefined);\n  useEffect(() => {\n    if (balanceInfo) {\n      if (balanceInfo.tokenSymbol) {\n        const coin = balanceInfo.tokenSymbol.toUpperCase();\n        // Don't fetch USD stable coins. Mark to 1 USD.\n        if (coin === 'USDT' || coin === 'USDC') {\n          setPrice(1);\n        }\n        // A Serum market exists. Fetch the price.\n        else if (serumMarkets[coin]) {\n          let m = serumMarkets[coin];\n          priceStore\n            .getPrice(connection, m.name)\n            .then((price) => {\n              setPrice(price);\n            })\n            .catch((err) => {\n              console.error(err);\n              setPrice(null);\n            });\n        }\n        // No Serum market exists.\n        else {\n          setPrice(null);\n        }\n      }\n      // No token symbol so don't fetch market data.\n      else {\n        setPrice(null);\n      }\n    }\n  }, [price, balanceInfo, connection]);\n\n  expandable = expandable === undefined ? true : expandable;\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let {\n    amount,\n    decimals,\n    mint,\n    tokenName,\n    tokenSymbol,\n    tokenLogoUri,\n  } = balanceInfo;\n  tokenName = tokenName ?? abbreviateAddress(mint);\n  let displayName;\n  if (isExtensionWidth) {\n    displayName = tokenSymbol ?? tokenName;\n  } else {\n    displayName = tokenName + (tokenSymbol ? ` (${tokenSymbol})` : '');\n  }\n\n  // Fetch and cache the associated token address.\n  if (wallet && wallet.publicKey && mint) {\n    if (\n      associatedTokensCache[wallet.publicKey.toString()] === undefined ||\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()] ===\n        undefined\n    ) {\n      findAssociatedTokenAddress(wallet.publicKey, mint).then((assocTok) => {\n        let walletAccounts = Object.assign(\n          {},\n          associatedTokensCache[wallet.publicKey.toString()],\n        );\n        walletAccounts[mint.toString()] = assocTok;\n        associatedTokensCache[wallet.publicKey.toString()] = walletAccounts;\n        if (assocTok.equals(publicKey)) {\n          // Force a rerender now that we've cached the value.\n          setForceUpdate((forceUpdate) => !forceUpdate);\n        }\n      });\n    }\n  }\n\n  // undefined => not loaded.\n  let isAssociatedToken = mint ? undefined : false;\n  if (\n    wallet &&\n    wallet.publicKey &&\n    mint &&\n    associatedTokensCache[wallet.publicKey.toString()]\n  ) {\n    let acc =\n      associatedTokensCache[wallet.publicKey.toString()][mint.toString()];\n    if (acc) {\n      if (acc.equals(publicKey)) {\n        isAssociatedToken = true;\n      } else {\n        isAssociatedToken = false;\n      }\n    }\n  }\n\n  const subtitle =\n    isExtensionWidth || !publicKey.equals(balanceInfo.owner) ? undefined : (\n      <div style={{ display: 'flex', height: '20px', overflow: 'hidden' }}>\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center',\n            flexDirection: 'column',\n          }}\n        >\n          {publicKey.toBase58()}\n        </div>\n      </div>\n    );\n\n  const usdValue =\n    price === undefined // Not yet loaded.\n      ? undefined\n      : price === null // Loaded and empty.\n      ? null\n      : ((amount / Math.pow(10, decimals)) * price).toFixed(2); // Loaded.\n  if (setUsdValue && usdValue !== undefined) {\n    setUsdValue(publicKey, usdValue === null ? null : parseFloat(usdValue));\n  }\n\n  return (\n    <>\n      <ListItem button onClick={() => expandable && setOpen((open) => !open)}>\n        <ListItemIcon>\n          <TokenIcon\n            mint={mint}\n            tokenName={tokenName}\n            url={tokenLogoUri}\n            size={28}\n          />\n        </ListItemIcon>\n        <div style={{ display: 'flex', flex: 1 }}>\n          <ListItemText\n            primary={\n              <>\n                {balanceFormat.format(amount / Math.pow(10, decimals))}{' '}\n                {displayName}\n              </>\n            }\n            secondary={subtitle}\n            secondaryTypographyProps={{ className: classes.address }}\n          />\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              flexDirection: 'column',\n            }}\n          >\n            {price && (\n              <Typography color=\"textSecondary\">\n                {numberFormat.format(usdValue)}\n              </Typography>\n            )}\n          </div>\n        </div>\n        {expandable ? open ? <ExpandLess /> : <ExpandMore /> : <></>}\n      </ListItem>\n      {expandable && (\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <BalanceListItemDetails\n            isAssociatedToken={isAssociatedToken}\n            publicKey={publicKey}\n            serumMarkets={serumMarkets}\n            balanceInfo={balanceInfo}\n          />\n        </Collapse>\n      )}\n    </>\n  );\n}\n\nfunction BalanceListItemDetails({\n  publicKey,\n  serumMarkets,\n  balanceInfo,\n  isAssociatedToken,\n}) {\n  const urlSuffix = useGemachainExplorerUrlSuffix();\n  const classes = useStyles();\n  const [sendDialogOpen, setSendDialogOpen] = useState(false);\n  const [depositDialogOpen, setDepositDialogOpen] = useState(false);\n  const [tokenInfoDialogOpen, setTokenInfoDialogOpen] = useState(false);\n  const [exportAccDialogOpen, setExportAccDialogOpen] = useState(false);\n  const [\n    closeTokenAccountDialogOpen,\n    setCloseTokenAccountDialogOpen,\n  ] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const wallet = useWallet();\n  const isProdNetwork = useIsProdNetwork();\n  const [swapInfo] = useAsyncData(async () => {\n    if (!showSwapAddress || !isProdNetwork) {\n      return null;\n    }\n    return await swapApiRequest(\n      'POST',\n      'swap_to',\n      {\n        blockchain: 'gema',\n        coin: balanceInfo.mint?.toBase58(),\n        address: publicKey.toBase58(),\n      },\n      { ignoreUserErrors: true },\n    );\n  }, [\n    'swapInfo',\n    isProdNetwork,\n    balanceInfo.mint?.toBase58(),\n    publicKey.toBase58(),\n  ]);\n  const isExtensionWidth = useIsExtensionWidth();\n\n  if (!balanceInfo) {\n    return <LoadingIndicator delay={0} />;\n  }\n\n  let { mint, tokenName, tokenSymbol, owner, amount } = balanceInfo;\n\n  // Only show the export UI for the native GEMA coin.\n  const exportNeedsDisplay =\n    mint === null && tokenName === 'GEMA' && tokenSymbol === 'GEMA';\n\n  const market = tokenSymbol\n    ? serumMarkets[tokenSymbol.toUpperCase()]\n      ? serumMarkets[tokenSymbol.toUpperCase()].publicKey\n      : undefined\n    : undefined;\n  const isSolAddress = publicKey.equals(owner);\n  const additionalInfo = isExtensionWidth ? undefined : (\n    <>\n      <Typography variant=\"body2\">\n        Token Name: {tokenName ?? 'Unknown'}\n      </Typography>\n      <Typography variant=\"body2\">\n        Token Symbol: {tokenSymbol ?? 'Unknown'}\n      </Typography>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div>\n          {!isSolAddress && isAssociatedToken === false && (\n            <div style={{ display: 'flex' }}>\n              This is an auxiliary token account.\n            </div>\n          )}\n          <Typography variant=\"body2\">\n            <Link\n              href={\n                `https://solscan.io/account/${publicKey.toBase58()}` + urlSuffix\n              }\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Solscan\n            </Link>\n          </Typography>\n          {market && (\n            <Typography variant=\"body2\">\n              <Link\n                href={`https://dex.projectserum.com/#/market/${market}`}\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Serum\n              </Link>\n            </Typography>\n          )}\n          {swapInfo && swapInfo.coin.erc20Contract && (\n            <Typography variant=\"body2\">\n              <Link\n                href={\n                  `https://etherscan.io/token/${swapInfo.coin.erc20Contract}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Ethereum\n              </Link>\n            </Typography>\n          )}\n          {!isSolAddress && (\n            <Typography variant=\"body2\">\n              <Link\n                className={classes.viewDetails}\n                onClick={() => setShowDetails(!showDetails)}\n              >\n                View Details\n              </Link>\n            </Typography>\n          )}\n          {showDetails &&\n            (mint ? (\n              <Typography variant=\"body2\" className={classes.address}>\n                Mint Address: {mint.toBase58()}\n              </Typography>\n            ) : null)}\n          {!isSolAddress && showDetails && (\n            <Typography variant=\"body2\" className={classes.address}>\n              {isAssociatedToken ? 'Associated' : ''} Token Metadata:{' '}\n              {publicKey.toBase58()}\n            </Typography>\n          )}\n        </div>\n        {exportNeedsDisplay && wallet.allowsExport && (\n          <div>\n            <Typography variant=\"body2\">\n              <Link href={'#'} onClick={(e) => setExportAccDialogOpen(true)}>\n                Export\n              </Link>\n            </Typography>\n          </div>\n        )}\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      {wallet.allowsExport && (\n        <ExportAccountDialog\n          onClose={() => setExportAccDialogOpen(false)}\n          open={exportAccDialogOpen}\n        />\n      )}\n      <div className={classes.itemDetails}>\n        <div className={classes.buttonContainer}>\n          {!publicKey.equals(owner) && showTokenInfoDialog ? (\n            <Button\n              variant=\"outlined\"\n              color=\"default\"\n              startIcon={<InfoIcon />}\n              onClick={() => setTokenInfoDialogOpen(true)}\n            >\n              Token Info\n            </Button>\n          ) : null}\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<ReceiveIcon />}\n            onClick={() => setDepositDialogOpen(true)}\n          >\n            Receive\n          </Button>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            startIcon={<SendIcon />}\n            onClick={() => setSendDialogOpen(true)}\n          >\n            Send\n          </Button>\n          {localStorage.getItem('warning-close-account') &&\n          mint &&\n          amount === 0 ? (\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              size=\"small\"\n              startIcon={<DeleteIcon />}\n              onClick={() => setCloseTokenAccountDialogOpen(true)}\n            >\n              Delete\n            </Button>\n          ) : null}\n        </div>\n        {additionalInfo}\n      </div>\n      <SendDialog\n        open={sendDialogOpen}\n        onClose={() => setSendDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <DepositDialog\n        open={depositDialogOpen}\n        onClose={() => setDepositDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n        swapInfo={swapInfo}\n        isAssociatedToken={isAssociatedToken}\n      />\n      <TokenInfoDialog\n        open={tokenInfoDialogOpen}\n        onClose={() => setTokenInfoDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n      <CloseTokenAccountDialog\n        open={closeTokenAccountDialogOpen}\n        onClose={() => setCloseTokenAccountDialogOpen(false)}\n        balanceInfo={balanceInfo}\n        publicKey={publicKey}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}