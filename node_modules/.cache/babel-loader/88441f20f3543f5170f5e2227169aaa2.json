{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mint = exports.TokenData = exports.NameRegistryState = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst borsh_1 = require(\"borsh\");\n\nclass NameRegistryState {\n  constructor(obj) {\n    this.parentName = new web3_js_1.PublicKey(obj.parentName);\n    this.owner = new web3_js_1.PublicKey(obj.owner);\n    this.class = new web3_js_1.PublicKey(obj.class);\n  }\n\n  static async retrieve(connection, nameAccountKey) {\n    var _a;\n\n    let nameAccount = await connection.getAccountInfo(nameAccountKey, \"processed\");\n\n    if (!nameAccount) {\n      throw new Error(\"Invalid name account provided\");\n    }\n\n    let res = borsh_1.deserializeUnchecked(this.schema, NameRegistryState, nameAccount.data);\n    res.data = (_a = nameAccount.data) === null || _a === void 0 ? void 0 : _a.slice(this.HEADER_LEN);\n    res.address = nameAccountKey;\n    return res;\n  }\n\n  static async _retrieveBatch(connection, nameAccountKeys) {\n    const nameAccounts = await connection.getMultipleAccountsInfo(nameAccountKeys);\n\n    const fn = (data, key) => {\n      if (!data) return undefined;\n      const res = borsh_1.deserializeUnchecked(this.schema, NameRegistryState, data);\n      res.data = data === null || data === void 0 ? void 0 : data.slice(this.HEADER_LEN);\n      res.address = key;\n      return res;\n    };\n\n    return nameAccounts.map((e, idx) => fn(e === null || e === void 0 ? void 0 : e.data, nameAccountKeys[idx]));\n  }\n\n  static async retrieveBatch(connection, nameAccountKeys) {\n    let result = [];\n\n    while (nameAccountKeys.length > 0) {\n      result.push(...(await this._retrieveBatch(connection, nameAccountKeys.splice(0, 100))));\n    }\n\n    return result;\n  }\n\n}\n\nexports.NameRegistryState = NameRegistryState;\nNameRegistryState.HEADER_LEN = 96;\nNameRegistryState.schema = new Map([[NameRegistryState, {\n  kind: \"struct\",\n  fields: [[\"parentName\", [32]], [\"owner\", [32]], [\"class\", [32]]]\n}]]);\n\nclass TokenData {\n  constructor(obj) {\n    this.name = obj.name;\n    this.ticker = obj.ticker;\n    this.mint = obj.mint;\n    this.decimals = obj.decimals;\n    this.website = obj === null || obj === void 0 ? void 0 : obj.website;\n    this.logoUri = obj === null || obj === void 0 ? void 0 : obj.logoUri;\n  }\n\n  serialize() {\n    return borsh_1.serialize(TokenData.schema, this);\n  }\n\n  static deserialize(data) {\n    return borsh_1.deserializeUnchecked(TokenData.schema, TokenData, data);\n  }\n\n}\n\nexports.TokenData = TokenData;\nTokenData.schema = new Map([[TokenData, {\n  kind: \"struct\",\n  fields: [[\"name\", \"string\"], [\"ticker\", \"string\"], [\"mint\", [32]], [\"decimals\", \"u8\"], [\"website\", {\n    kind: \"option\",\n    type: \"string\"\n  }], [\"logoUri\", {\n    kind: \"option\",\n    type: \"string\"\n  }]]\n}]]);\n\nclass Mint {\n  constructor(obj) {\n    this.mint = obj.mint;\n  }\n\n  serialize() {\n    return borsh_1.serialize(Mint.schema, this);\n  }\n\n  static deserialize(data) {\n    return borsh_1.deserializeUnchecked(Mint.schema, Mint, data);\n  }\n\n}\n\nexports.Mint = Mint;\nMint.schema = new Map([[Mint, {\n  kind: \"struct\",\n  fields: [[\"mint\", [32]]]\n}]]);","map":{"version":3,"sources":["../src/state.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mint = exports.TokenData = exports.NameRegistryState = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst borsh_1 = require(\"borsh\");\nclass NameRegistryState {\n    constructor(obj) {\n        this.parentName = new web3_js_1.PublicKey(obj.parentName);\n        this.owner = new web3_js_1.PublicKey(obj.owner);\n        this.class = new web3_js_1.PublicKey(obj.class);\n    }\n    static async retrieve(connection, nameAccountKey) {\n        var _a;\n        let nameAccount = await connection.getAccountInfo(nameAccountKey, \"processed\");\n        if (!nameAccount) {\n            throw new Error(\"Invalid name account provided\");\n        }\n        let res = borsh_1.deserializeUnchecked(this.schema, NameRegistryState, nameAccount.data);\n        res.data = (_a = nameAccount.data) === null || _a === void 0 ? void 0 : _a.slice(this.HEADER_LEN);\n        res.address = nameAccountKey;\n        return res;\n    }\n    static async _retrieveBatch(connection, nameAccountKeys) {\n        const nameAccounts = await connection.getMultipleAccountsInfo(nameAccountKeys);\n        const fn = (data, key) => {\n            if (!data)\n                return undefined;\n            const res = borsh_1.deserializeUnchecked(this.schema, NameRegistryState, data);\n            res.data = data === null || data === void 0 ? void 0 : data.slice(this.HEADER_LEN);\n            res.address = key;\n            return res;\n        };\n        return nameAccounts.map((e, idx) => fn(e === null || e === void 0 ? void 0 : e.data, nameAccountKeys[idx]));\n    }\n    static async retrieveBatch(connection, nameAccountKeys) {\n        let result = [];\n        while (nameAccountKeys.length > 0) {\n            result.push(...(await this._retrieveBatch(connection, nameAccountKeys.splice(0, 100))));\n        }\n        return result;\n    }\n}\nexports.NameRegistryState = NameRegistryState;\nNameRegistryState.HEADER_LEN = 96;\nNameRegistryState.schema = new Map([\n    [\n        NameRegistryState,\n        {\n            kind: \"struct\",\n            fields: [\n                [\"parentName\", [32]],\n                [\"owner\", [32]],\n                [\"class\", [32]],\n            ],\n        },\n    ],\n]);\nclass TokenData {\n    constructor(obj) {\n        this.name = obj.name;\n        this.ticker = obj.ticker;\n        this.mint = obj.mint;\n        this.decimals = obj.decimals;\n        this.website = obj === null || obj === void 0 ? void 0 : obj.website;\n        this.logoUri = obj === null || obj === void 0 ? void 0 : obj.logoUri;\n    }\n    serialize() {\n        return borsh_1.serialize(TokenData.schema, this);\n    }\n    static deserialize(data) {\n        return borsh_1.deserializeUnchecked(TokenData.schema, TokenData, data);\n    }\n}\nexports.TokenData = TokenData;\nTokenData.schema = new Map([\n    [\n        TokenData,\n        {\n            kind: \"struct\",\n            fields: [\n                [\"name\", \"string\"],\n                [\"ticker\", \"string\"],\n                [\"mint\", [32]],\n                [\"decimals\", \"u8\"],\n                [\"website\", { kind: \"option\", type: \"string\" }],\n                [\"logoUri\", { kind: \"option\", type: \"string\" }],\n            ],\n        },\n    ],\n]);\nclass Mint {\n    constructor(obj) {\n        this.mint = obj.mint;\n    }\n    serialize() {\n        return borsh_1.serialize(Mint.schema, this);\n    }\n    static deserialize(data) {\n        return borsh_1.deserializeUnchecked(Mint.schema, Mint, data);\n    }\n}\nexports.Mint = Mint;\nMint.schema = new Map([\n    [\n        Mint,\n        {\n            kind: \"struct\",\n            fields: [[\"mint\", [32]]],\n        },\n    ],\n]);\n//# sourceMappingURL=state.js.map"]},"metadata":{},"sourceType":"script"}