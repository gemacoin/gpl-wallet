{"ast":null,"code":"var _jsxFileName = \"/home/imentus/spl-token-wallet/src/utils/connection.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useMemo } from 'react';\nimport { clusterApiUrl, Connection } from '@solana/web3.js';\nimport tuple from 'immutable-tuple';\nimport * as anchor from '@project-serum/anchor';\nimport { useLocalStorageState, useRefEqual } from './utils';\nimport { refreshCache, setCache, useAsyncData } from './fetch-loop';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectionContext = /*#__PURE__*/React.createContext(null);\nexport const MAINNET_URL = 'https://solana-api.projectserum.com'; // No backup url for now. Leave the variable to not break wallets that\n// have saved the url in their local storage, previously.\n\nexport const MAINNET_BACKUP_URL = 'https://solana-api.projectserum.com/';\nexport function ConnectionProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [endpoint, setEndpoint] = useLocalStorageState('connectionEndpoint', MAINNET_URL);\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [endpoint]);\n  return /*#__PURE__*/_jsxDEV(ConnectionContext.Provider, {\n    value: {\n      endpoint,\n      setEndpoint,\n      connection\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ConnectionProvider, \"hPH+wZkp+18st19deLu1UmZhJL8=\", false, function () {\n  return [useLocalStorageState];\n});\n\n_c = ConnectionProvider;\nexport function useConnection() {\n  _s2();\n\n  let context = useContext(ConnectionContext);\n\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n\n  return context.connection;\n}\n\n_s2(useConnection, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useConnectionConfig() {\n  _s3();\n\n  let context = useContext(ConnectionContext);\n\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n\n  return {\n    endpoint: context.endpoint,\n    setEndpoint: context.setEndpoint\n  };\n}\n\n_s3(useConnectionConfig, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useIsProdNetwork() {\n  _s4();\n\n  let context = useContext(ConnectionContext);\n\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n\n  return context.endpoint === MAINNET_URL || context.endpoint === MAINNET_BACKUP_URL;\n}\n\n_s4(useIsProdNetwork, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useSolanaExplorerUrlSuffix() {\n  _s5();\n\n  const context = useContext(ConnectionContext);\n\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n\n  const endpoint = context.endpoint;\n\n  if (endpoint === clusterApiUrl('devnet')) {\n    return '?cluster=devnet';\n  } else if (endpoint === clusterApiUrl('testnet')) {\n    return '?cluster=testnet';\n  }\n\n  return '';\n}\n\n_s5(useSolanaExplorerUrlSuffix, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport function useAccountInfo(publicKey) {\n  _s6();\n\n  var _publicKey$toBase;\n\n  const connection = useConnection();\n  const cacheKey = tuple(connection, publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58());\n  const [accountInfo, loaded] = useAsyncData(async () => publicKey ? connection.getAccountInfo(publicKey) : null, cacheKey);\n  useEffect(() => {\n    if (!publicKey) {\n      return;\n    }\n\n    let previousInfo = null;\n    const id = connection.onAccountChange(publicKey, info => {\n      if (!previousInfo || !previousInfo.data.equals(info.data) || previousInfo.carats !== info.carats) {\n        previousInfo = info;\n        setCache(cacheKey, info);\n      }\n    });\n    return () => {\n      connection.removeAccountChangeListener(id);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connection, (_publicKey$toBase = publicKey === null || publicKey === void 0 ? void 0 : publicKey.toBase58()) !== null && _publicKey$toBase !== void 0 ? _publicKey$toBase : '', cacheKey]);\n  return [useRefEqual(accountInfo, (oldInfo, newInfo) => !!oldInfo && !!newInfo && oldInfo.data.equals(newInfo.data) && oldInfo.carats === newInfo.carats), loaded];\n}\n\n_s6(useAccountInfo, \"paX3kKSrquYvLDQGt8ef/AMEeY0=\", false, function () {\n  return [useConnection, useAsyncData, useRefEqual];\n});\n\nexport function refreshAccountInfo(connection, publicKey) {\n  let clearCache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const cacheKey = tuple(connection, publicKey.toBase58());\n  refreshCache(cacheKey, clearCache);\n}\nexport function setInitialAccountInfo(connection, publicKey, accountInfo) {\n  const cacheKey = tuple(connection, publicKey.toBase58());\n  setCache(cacheKey, accountInfo, {\n    initializeOnly: true\n  });\n}\nexport async function getMultipleSolanaAccounts(connection, publicKeys) {\n  return anchor.utils.rpc.getMultipleAccounts(connection, publicKeys);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectionProvider\");","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/utils/connection.tsx"],"names":["React","useContext","useEffect","useMemo","clusterApiUrl","Connection","tuple","anchor","useLocalStorageState","useRefEqual","refreshCache","setCache","useAsyncData","ConnectionContext","createContext","MAINNET_URL","MAINNET_BACKUP_URL","ConnectionProvider","children","endpoint","setEndpoint","connection","useConnection","context","Error","useConnectionConfig","useIsProdNetwork","useSolanaExplorerUrlSuffix","useAccountInfo","publicKey","cacheKey","toBase58","accountInfo","loaded","getAccountInfo","previousInfo","id","onAccountChange","info","data","equals","carats","removeAccountChangeListener","oldInfo","newInfo","refreshAccountInfo","clearCache","setInitialAccountInfo","initializeOnly","getMultipleSolanaAccounts","publicKeys","utils","rpc","getMultipleAccounts"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useMemo } from 'react';\nimport {\n  AccountInfo,\n  clusterApiUrl,\n  Connection,\n  PublicKey,\n} from '@solana/web3.js';\nimport tuple from 'immutable-tuple';\nimport * as anchor from '@project-serum/anchor';\nimport { useLocalStorageState, useRefEqual } from './utils';\nimport { refreshCache, setCache, useAsyncData } from './fetch-loop';\n\nconst ConnectionContext = React.createContext<{\n  endpoint: string;\n  setEndpoint: (string) => void;\n  connection: Connection;\n} | null>(null);\n\nexport const MAINNET_URL = 'https://solana-api.projectserum.com';\n// No backup url for now. Leave the variable to not break wallets that\n// have saved the url in their local storage, previously.\nexport const MAINNET_BACKUP_URL = 'https://solana-api.projectserum.com/';\nexport function ConnectionProvider({ children }) {\n  const [endpoint, setEndpoint] = useLocalStorageState(\n    'connectionEndpoint',\n    MAINNET_URL,\n  );\n\n  const connection = useMemo(() => new Connection(endpoint, 'recent'), [\n    endpoint,\n  ]);\n\n  return (\n    <ConnectionContext.Provider value={{ endpoint, setEndpoint, connection }}>\n      {children}\n    </ConnectionContext.Provider>\n  );\n}\n\nexport function useConnection(): Connection {\n  let context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.connection;\n}\n\nexport function useConnectionConfig() {\n  let context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return { endpoint: context.endpoint, setEndpoint: context.setEndpoint };\n}\n\nexport function useIsProdNetwork() {\n  let context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  return context.endpoint === MAINNET_URL || context.endpoint === MAINNET_BACKUP_URL;\n}\n\nexport function useSolanaExplorerUrlSuffix() {\n  const context = useContext(ConnectionContext);\n  if (!context) {\n    throw new Error('Missing connection context');\n  }\n  const endpoint = context.endpoint;\n  if (endpoint === clusterApiUrl('devnet')) {\n    return '?cluster=devnet';\n  } else if (endpoint === clusterApiUrl('testnet')) {\n    return '?cluster=testnet';\n  }\n  return '';\n}\n\nexport function useAccountInfo(publicKey?: PublicKey) {\n  const connection = useConnection();\n  const cacheKey = tuple(connection, publicKey?.toBase58());\n  const [accountInfo, loaded] = useAsyncData(\n    async () => (publicKey ? connection.getAccountInfo(publicKey) : null),\n    cacheKey,\n  );\n  useEffect(() => {\n    if (!publicKey) {\n      return;\n    }\n    let previousInfo: AccountInfo<Buffer> | null = null;\n    const id = connection.onAccountChange(publicKey, (info) => {\n      if (\n        !previousInfo ||\n        !previousInfo.data.equals(info.data) ||\n        previousInfo.carats !== info.carats\n      ) {\n        previousInfo = info;\n        setCache(cacheKey, info);\n      }\n    });\n    return () => {\n      connection.removeAccountChangeListener(id);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [connection, publicKey?.toBase58() ?? '', cacheKey]);\n  return [\n    useRefEqual(\n      accountInfo,\n      (oldInfo, newInfo) =>\n        !!oldInfo &&\n        !!newInfo &&\n        oldInfo.data.equals(newInfo.data) &&\n        oldInfo.carats === newInfo.carats,\n    ),\n    loaded,\n  ];\n}\n\nexport function refreshAccountInfo(connection, publicKey, clearCache = false) {\n  const cacheKey = tuple(connection, publicKey.toBase58());\n  refreshCache(cacheKey, clearCache);\n}\n\nexport function setInitialAccountInfo(connection, publicKey, accountInfo) {\n  const cacheKey = tuple(connection, publicKey.toBase58());\n  setCache(cacheKey, accountInfo, { initializeOnly: true });\n}\n\nexport async function getMultipleSolanaAccounts(\n  connection: Connection,\n  publicKeys: PublicKey[],\n): Promise<\n  Array<null | { publicKey: PublicKey; account: AccountInfo<Buffer> }>\n> {\n\treturn anchor.utils.rpc.getMultipleAccounts(connection, publicKeys);\n}\n"]},"metadata":{},"sourceType":"module"}