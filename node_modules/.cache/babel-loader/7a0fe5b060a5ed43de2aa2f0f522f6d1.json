{"ast":null,"code":"import * as BufferLayout from 'buffer-layout';\nimport { PublicKey, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nexport const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\nexport const WRAPPED_GEMA_MINT = new PublicKey('So11111111111111111111111111111111111111112');\nexport const MEMO_PROGRAM_ID = new PublicKey('Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo');\nconst LAYOUT = BufferLayout.union(BufferLayout.u8('instruction'));\nLAYOUT.addVariant(0, BufferLayout.struct([BufferLayout.u8('decimals'), BufferLayout.blob(32, 'mintAuthority'), BufferLayout.u8('freezeAuthorityOption'), BufferLayout.blob(32, 'freezeAuthority')]), 'initializeMint');\nLAYOUT.addVariant(1, BufferLayout.struct([]), 'initializeAccount');\nLAYOUT.addVariant(7, BufferLayout.struct([BufferLayout.nu64('amount')]), 'mintTo');\nLAYOUT.addVariant(8, BufferLayout.struct([BufferLayout.nu64('amount')]), 'burn');\nLAYOUT.addVariant(9, BufferLayout.struct([]), 'closeAccount');\nLAYOUT.addVariant(12, BufferLayout.struct([BufferLayout.nu64('amount'), BufferLayout.u8('decimals')]), 'transferChecked');\nconst instructionMaxSpan = Math.max(...Object.values(LAYOUT.registry).map(r => r.span));\n\nfunction encodeTokenInstructionData(instruction) {\n  let b = Buffer.alloc(instructionMaxSpan);\n  let span = LAYOUT.encode(instruction, b);\n  return b.slice(0, span);\n}\n\nexport function initializeMint(_ref) {\n  let {\n    mint,\n    decimals,\n    mintAuthority,\n    freezeAuthority\n  } = _ref;\n  let keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeMint: {\n        decimals,\n        mintAuthority: mintAuthority.toBuffer(),\n        freezeAuthorityOption: !!freezeAuthority,\n        freezeAuthority: (freezeAuthority || PublicKey.default).toBuffer()\n      }\n    }),\n    programId: TOKEN_PROGRAM_ID\n  });\n}\nexport function initializeAccount(_ref2) {\n  let {\n    account,\n    mint,\n    owner\n  } = _ref2;\n  let keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeAccount: {}\n    }),\n    programId: TOKEN_PROGRAM_ID\n  });\n}\nexport function transferChecked(_ref3) {\n  let {\n    source,\n    mint,\n    destination,\n    amount,\n    decimals,\n    owner\n  } = _ref3;\n  let keys = [{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mint,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: true,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      transferChecked: {\n        amount,\n        decimals\n      }\n    }),\n    programId: TOKEN_PROGRAM_ID\n  });\n}\nexport function mintTo(_ref4) {\n  let {\n    mint,\n    destination,\n    amount,\n    mintAuthority\n  } = _ref4;\n  let keys = [{\n    pubkey: mint,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: mintAuthority,\n    isSigner: true,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      mintTo: {\n        amount\n      }\n    }),\n    programId: TOKEN_PROGRAM_ID\n  });\n}\nexport function closeAccount(_ref5) {\n  let {\n    source,\n    destination,\n    owner\n  } = _ref5;\n  const keys = [{\n    pubkey: source,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: destination,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: true,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      closeAccount: {}\n    }),\n    programId: TOKEN_PROGRAM_ID\n  });\n}\nexport function memoInstruction(memo) {\n  return new TransactionInstruction({\n    keys: [],\n    data: Buffer.from(memo, 'utf-8'),\n    programId: MEMO_PROGRAM_ID\n  });\n}\n\nclass PublicKeyLayout extends BufferLayout.Blob {\n  constructor(property) {\n    super(32, property);\n  }\n\n  decode(b, offset) {\n    return new PublicKey(super.decode(b, offset));\n  }\n\n  encode(src, b, offset) {\n    return super.encode(src.toBuffer(), b, offset);\n  }\n\n}\n\nfunction publicKeyLayout(property) {\n  return new PublicKeyLayout(property);\n}\n\nexport const OWNER_VALIDATION_PROGRAM_ID = new PublicKey('4MNPdKu9wFMvEeZBMt3Eipfs5ovVWTJb31pEXDJAAxX5');\nexport const OWNER_VALIDATION_LAYOUT = BufferLayout.struct([publicKeyLayout('account')]);\nexport function encodeOwnerValidationInstruction(instruction) {\n  const b = Buffer.alloc(OWNER_VALIDATION_LAYOUT.span);\n  const span = OWNER_VALIDATION_LAYOUT.encode(instruction, b);\n  return b.slice(0, span);\n}\nexport function assertOwner(_ref6) {\n  let {\n    account,\n    owner\n  } = _ref6;\n  const keys = [{\n    pubkey: account,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    data: encodeOwnerValidationInstruction({\n      account: owner\n    }),\n    programId: OWNER_VALIDATION_PROGRAM_ID\n  });\n}","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/utils/tokens/instructions.js"],"names":["BufferLayout","PublicKey","SYSVAR_RENT_PUBKEY","TransactionInstruction","TOKEN_PROGRAM_ID","WRAPPED_GEMA_MINT","MEMO_PROGRAM_ID","LAYOUT","union","u8","addVariant","struct","blob","nu64","instructionMaxSpan","Math","max","Object","values","registry","map","r","span","encodeTokenInstructionData","instruction","b","Buffer","alloc","encode","slice","initializeMint","mint","decimals","mintAuthority","freezeAuthority","keys","pubkey","isSigner","isWritable","data","toBuffer","freezeAuthorityOption","default","programId","initializeAccount","account","owner","transferChecked","source","destination","amount","mintTo","closeAccount","memoInstruction","memo","from","PublicKeyLayout","Blob","constructor","property","decode","offset","src","publicKeyLayout","OWNER_VALIDATION_PROGRAM_ID","OWNER_VALIDATION_LAYOUT","encodeOwnerValidationInstruction","assertOwner"],"mappings":"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","sourcesContent":["import * as BufferLayout from 'buffer-layout';\nimport {\n  PublicKey,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport const TOKEN_PROGRAM_ID = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\nexport const WRAPPED_GEMA_MINT = new PublicKey(\n  'So11111111111111111111111111111111111111112',\n);\n\nexport const MEMO_PROGRAM_ID = new PublicKey(\n  'Memo1UhkJRfHyvLMcVucJwxXeuD728EqVDDwQDxFMNo',\n);\n\nconst LAYOUT = BufferLayout.union(BufferLayout.u8('instruction'));\nLAYOUT.addVariant(\n  0,\n  BufferLayout.struct([\n    BufferLayout.u8('decimals'),\n    BufferLayout.blob(32, 'mintAuthority'),\n    BufferLayout.u8('freezeAuthorityOption'),\n    BufferLayout.blob(32, 'freezeAuthority'),\n  ]),\n  'initializeMint',\n);\nLAYOUT.addVariant(1, BufferLayout.struct([]), 'initializeAccount');\nLAYOUT.addVariant(\n  7,\n  BufferLayout.struct([BufferLayout.nu64('amount')]),\n  'mintTo',\n);\nLAYOUT.addVariant(\n  8,\n  BufferLayout.struct([BufferLayout.nu64('amount')]),\n  'burn',\n);\nLAYOUT.addVariant(9, BufferLayout.struct([]), 'closeAccount');\nLAYOUT.addVariant(\n  12,\n  BufferLayout.struct([BufferLayout.nu64('amount'), BufferLayout.u8('decimals')]),\n  'transferChecked',\n);\n\nconst instructionMaxSpan = Math.max(\n  ...Object.values(LAYOUT.registry).map((r) => r.span),\n);\n\nfunction encodeTokenInstructionData(instruction) {\n  let b = Buffer.alloc(instructionMaxSpan);\n  let span = LAYOUT.encode(instruction, b);\n  return b.slice(0, span);\n}\n\nexport function initializeMint({\n  mint,\n  decimals,\n  mintAuthority,\n  freezeAuthority,\n}) {\n  let keys = [\n    { pubkey: mint, isSigner: false, isWritable: true },\n    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeMint: {\n        decimals,\n        mintAuthority: mintAuthority.toBuffer(),\n        freezeAuthorityOption: !!freezeAuthority,\n        freezeAuthority: (freezeAuthority || PublicKey.default).toBuffer(),\n      },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function initializeAccount({ account, mint, owner }) {\n  let keys = [\n    { pubkey: account, isSigner: false, isWritable: true },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      initializeAccount: {},\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function transferChecked({ source, mint, destination, amount, decimals, owner }) {\n  let keys = [\n    { pubkey: source, isSigner: false, isWritable: true },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: true, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      transferChecked: { amount, decimals },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function mintTo({ mint, destination, amount, mintAuthority }) {\n  let keys = [\n    { pubkey: mint, isSigner: false, isWritable: true },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: mintAuthority, isSigner: true, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      mintTo: {\n        amount,\n      },\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function closeAccount({ source, destination, owner }) {\n  const keys = [\n    { pubkey: source, isSigner: false, isWritable: true },\n    { pubkey: destination, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: true, isWritable: false },\n  ];\n  return new TransactionInstruction({\n    keys,\n    data: encodeTokenInstructionData({\n      closeAccount: {},\n    }),\n    programId: TOKEN_PROGRAM_ID,\n  });\n}\n\nexport function memoInstruction(memo) {\n  return new TransactionInstruction({\n    keys: [],\n    data: Buffer.from(memo, 'utf-8'),\n    programId: MEMO_PROGRAM_ID,\n  });\n}\n\nclass PublicKeyLayout extends BufferLayout.Blob {\n  constructor(property) {\n    super(32, property);\n  }\n\n  decode(b, offset) {\n    return new PublicKey(super.decode(b, offset));\n  }\n\n  encode(src, b, offset) {\n    return super.encode(src.toBuffer(), b, offset);\n  }\n}\n\nfunction publicKeyLayout(property) {\n  return new PublicKeyLayout(property);\n}\n\nexport const OWNER_VALIDATION_PROGRAM_ID = new PublicKey(\n  '4MNPdKu9wFMvEeZBMt3Eipfs5ovVWTJb31pEXDJAAxX5',\n);\n\nexport const OWNER_VALIDATION_LAYOUT = BufferLayout.struct([\n  publicKeyLayout('account'),\n]);\n\nexport function encodeOwnerValidationInstruction(instruction) {\n  const b = Buffer.alloc(OWNER_VALIDATION_LAYOUT.span);\n  const span = OWNER_VALIDATION_LAYOUT.encode(instruction, b);\n  return b.slice(0, span);\n}\n\nexport function assertOwner({ account, owner }) {\n  const keys = [{ pubkey: account, isSigner: false, isWritable: false }];\n  return new TransactionInstruction({\n    keys,\n    data: encodeOwnerValidationInstruction({ account: owner }),\n    programId: OWNER_VALIDATION_PROGRAM_ID,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}