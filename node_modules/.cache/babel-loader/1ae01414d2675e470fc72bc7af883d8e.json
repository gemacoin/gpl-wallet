{"ast":null,"code":"var _jsxFileName = \"/home/imentus/spl-token-wallet/src/components/instructions/StakeInstruction.js\";\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport LabelValue from './LabelValue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TYPE_LABELS = {\n  stakeAuthorizeWithSeed: 'Stake authorize with seed',\n  stakeAuthorize: 'Stake authorize',\n  stakeDeactivate: 'Deactivate stake',\n  stakeDelegate: 'Delegate stake',\n  stakeInitialize: 'Initialize stake',\n  stakeSplit: 'Split stake',\n  stakeWithdraw: 'Withdraw stake'\n};\nconst DATA_LABELS = {\n  stakePubkey: {\n    label: 'Stake',\n    address: true\n  },\n  authorizedStaker: {\n    label: 'Authorized staker',\n    address: true\n  },\n  authorizedWithdrawer: {\n    label: 'Authorized withdrawer',\n    address: true\n  },\n  lockup: {\n    label: 'Lockup',\n    address: false\n  },\n  authorizedPubkey: {\n    label: 'Authorized',\n    address: true\n  },\n  votePubkey: {\n    label: 'Vote',\n    address: true\n  },\n  authorizedSeed: {\n    label: 'Seed',\n    address: false\n  },\n  noncePubkey: {\n    label: 'Nonce',\n    address: true\n  },\n  authorityBase: {\n    label: 'Authority base',\n    address: true\n  },\n  authoritySeed: {\n    label: 'Authority seed',\n    address: false\n  },\n  authorityOwner: {\n    label: 'Authority owner',\n    address: true\n  },\n  newAuthorizedPubkey: {\n    label: 'New authorized',\n    address: true\n  },\n  stakeAuthorizationType: {\n    label: 'Stake authorization type',\n    address: false,\n    transform: () => JSON.stringify\n  },\n  custodianPubkey: {\n    label: 'Custodian',\n    address: true\n  },\n  splitStakePubkey: {\n    label: 'Split to',\n    address: true\n  },\n  carats: {\n    label: 'Carats',\n    address: false\n  }\n};\nexport default function StakeInstruction(_ref) {\n  let {\n    instruction,\n    onOpenAddress\n  } = _ref;\n  const {\n    type,\n    data\n  } = instruction;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle1\",\n      style: {\n        fontWeight: 'bold'\n      },\n      gutterBottom: true,\n      children: TYPE_LABELS[type]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), data && Object.entries(data).map(_ref2 => {\n      let [key, value] = _ref2;\n      const dataLabel = DATA_LABELS[key];\n\n      if (!dataLabel) {\n        return null;\n      }\n\n      const {\n        label,\n        address,\n        transform\n      } = dataLabel;\n      return /*#__PURE__*/_jsxDEV(LabelValue, {\n        label: label + '',\n        value: address ? value === null || value === void 0 ? void 0 : value.toBase58() : transform ? transform(value) : value,\n        link: address,\n        onClick: () => address && onOpenAddress(value === null || value === void 0 ? void 0 : value.toBase58())\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true);\n}\n_c = StakeInstruction;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeInstruction\");","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/components/instructions/StakeInstruction.js"],"names":["React","Typography","LabelValue","TYPE_LABELS","stakeAuthorizeWithSeed","stakeAuthorize","stakeDeactivate","stakeDelegate","stakeInitialize","stakeSplit","stakeWithdraw","DATA_LABELS","stakePubkey","label","address","authorizedStaker","authorizedWithdrawer","lockup","authorizedPubkey","votePubkey","authorizedSeed","noncePubkey","authorityBase","authoritySeed","authorityOwner","newAuthorizedPubkey","stakeAuthorizationType","transform","JSON","stringify","custodianPubkey","splitStakePubkey","carats","StakeInstruction","instruction","onOpenAddress","type","data","fontWeight","Object","entries","map","key","value","dataLabel","toBase58"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport LabelValue from './LabelValue';\n\nconst TYPE_LABELS = {\n  stakeAuthorizeWithSeed: 'Stake authorize with seed',\n  stakeAuthorize: 'Stake authorize',\n  stakeDeactivate: 'Deactivate stake',\n  stakeDelegate: 'Delegate stake',\n  stakeInitialize: 'Initialize stake',\n  stakeSplit: 'Split stake',\n  stakeWithdraw: 'Withdraw stake',\n};\n\nconst DATA_LABELS = {\n  stakePubkey: { label: 'Stake', address: true },\n  authorizedStaker: { label: 'Authorized staker', address: true },\n  authorizedWithdrawer: { label: 'Authorized withdrawer', address: true },\n  lockup: { label: 'Lockup', address: false },\n  authorizedPubkey: { label: 'Authorized', address: true },\n  votePubkey: { label: 'Vote', address: true },\n  authorizedSeed: { label: 'Seed', address: false },\n  noncePubkey: { label: 'Nonce', address: true },\n  authorityBase: { label: 'Authority base', address: true },\n  authoritySeed: { label: 'Authority seed', address: false },\n  authorityOwner: { label: 'Authority owner', address: true },\n  newAuthorizedPubkey: { label: 'New authorized', address: true },\n  stakeAuthorizationType: { label: 'Stake authorization type', address: false, transform: () => JSON.stringify },\n  custodianPubkey: { label: 'Custodian', address: true },\n  splitStakePubkey: { label: 'Split to', address: true },\n  carats: { label: 'Carats', address: false },\n};\n\nexport default function StakeInstruction({ instruction, onOpenAddress }) {\n  const { type, data } = instruction;\n\n  return (\n    <>\n      <Typography\n        variant=\"subtitle1\"\n        style={{ fontWeight: 'bold' }}\n        gutterBottom\n      >\n        {TYPE_LABELS[type]}\n      </Typography>\n      {data &&\n        Object.entries(data).map(([key, value]) => {\n          const dataLabel = DATA_LABELS[key];\n          if (!dataLabel) {\n            return null;\n          }\n          const { label, address, transform } = dataLabel;\n          return (\n            <LabelValue\n              key={key}\n              label={label + ''}\n              value={address ? value?.toBase58() : (transform ? transform(value) : value)}\n              link={address}\n              onClick={() => address && onOpenAddress(value?.toBase58())}\n            />\n          );\n        })}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}