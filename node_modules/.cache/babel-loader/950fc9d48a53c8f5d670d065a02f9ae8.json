{"ast":null,"code":"import TransportWebHid from '@ledgerhq/hw-transport-webhid';\nimport { getPublicKey, solana_derivation_path, solana_ledger_sign_bytes, solana_ledger_sign_transaction, solana_ledger_confirm_public_key } from './ledger-core';\nimport { DERIVATION_PATH } from './localStorage';\nimport bs58 from 'bs58';\nlet TRANSPORT = null;\nexport class LedgerWalletProvider {\n  constructor(args) {\n    this.init = async () => {\n      if (TRANSPORT === null) {\n        TRANSPORT = await TransportWebHid.create();\n      }\n\n      this.transport = TRANSPORT;\n      this.pubKey = await getPublicKey(this.transport, this.solanaDerivationPath);\n      this.transport.on('disconnect', this.onDisconnect);\n\n      this.listAddresses = async walletCount => {\n        // TODO: read accounts from ledger\n        return [this.pubKey];\n      };\n\n      return this;\n    };\n\n    this.signTransaction = async transaction => {\n      const sig_bytes = await solana_ledger_sign_transaction(this.transport, this.solanaDerivationPath, transaction);\n      transaction.addSignature(this.publicKey, sig_bytes);\n      return transaction;\n    };\n\n    this.createSignature = async message => {\n      const sig_bytes = await solana_ledger_sign_bytes(this.transport, this.solanaDerivationPath, message);\n      return bs58.encode(sig_bytes);\n    };\n\n    this.confirmPublicKey = async () => {\n      return await solana_ledger_confirm_public_key(this.transport, this.solanaDerivationPath);\n    };\n\n    this.onDisconnect = args && args.onDisconnect || (() => {});\n\n    this.derivationPath = args ? args.derivationPath : DERIVATION_PATH.bip44Change;\n    this.account = args ? args.account : undefined;\n    this.change = args ? args.change : undefined;\n    this.solanaDerivationPath = solana_derivation_path(this.account, this.change, this.derivationPath);\n  }\n\n  get publicKey() {\n    return this.pubKey;\n  }\n\n}","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/utils/walletProvider/ledger.js"],"names":["TransportWebHid","getPublicKey","solana_derivation_path","solana_ledger_sign_bytes","solana_ledger_sign_transaction","solana_ledger_confirm_public_key","DERIVATION_PATH","bs58","TRANSPORT","LedgerWalletProvider","constructor","args","init","create","transport","pubKey","solanaDerivationPath","on","onDisconnect","listAddresses","walletCount","signTransaction","transaction","sig_bytes","addSignature","publicKey","createSignature","message","encode","confirmPublicKey","derivationPath","bip44Change","account","undefined","change"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,+BAA5B;AACA,SACEC,YADF,EAEEC,sBAFF,EAGEC,wBAHF,EAIEC,8BAJF,EAKEC,gCALF,QAMO,eANP;AAOA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,IAAIC,SAAS,GAAG,IAAhB;AAEA,OAAO,MAAMC,oBAAN,CAA2B;AAChCC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAA,SAclBC,IAdkB,GAcX,YAAY;AACjB,UAAIJ,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,GAAG,MAAMR,eAAe,CAACa,MAAhB,EAAlB;AACD;;AACD,WAAKC,SAAL,GAAiBN,SAAjB;AACA,WAAKO,MAAL,GAAc,MAAMd,YAAY,CAAC,KAAKa,SAAN,EAAiB,KAAKE,oBAAtB,CAAhC;AACA,WAAKF,SAAL,CAAeG,EAAf,CAAkB,YAAlB,EAAgC,KAAKC,YAArC;;AACA,WAAKC,aAAL,GAAqB,MAAOC,WAAP,IAAuB;AAC1C;AACA,eAAO,CAAC,KAAKL,MAAN,CAAP;AACD,OAHD;;AAIA,aAAO,IAAP;AACD,KA1BiB;;AAAA,SAgClBM,eAhCkB,GAgCA,MAAOC,WAAP,IAAuB;AACvC,YAAMC,SAAS,GAAG,MAAMnB,8BAA8B,CACpD,KAAKU,SAD+C,EAEpD,KAAKE,oBAF+C,EAGpDM,WAHoD,CAAtD;AAKAA,MAAAA,WAAW,CAACE,YAAZ,CAAyB,KAAKC,SAA9B,EAAyCF,SAAzC;AACA,aAAOD,WAAP;AACD,KAxCiB;;AAAA,SA0ClBI,eA1CkB,GA0CA,MAAOC,OAAP,IAAmB;AACnC,YAAMJ,SAAS,GAAG,MAAMpB,wBAAwB,CAC9C,KAAKW,SADyC,EAE9C,KAAKE,oBAFyC,EAG9CW,OAH8C,CAAhD;AAKA,aAAOpB,IAAI,CAACqB,MAAL,CAAYL,SAAZ,CAAP;AACD,KAjDiB;;AAAA,SAmDlBM,gBAnDkB,GAmDC,YAAY;AAC7B,aAAO,MAAMxB,gCAAgC,CAC3C,KAAKS,SADsC,EAE3C,KAAKE,oBAFsC,CAA7C;AAID,KAxDiB;;AAChB,SAAKE,YAAL,GAAqBP,IAAI,IAAIA,IAAI,CAACO,YAAd,KAAgC,MAAM,CAAE,CAAxC,CAApB;;AACA,SAAKY,cAAL,GAAsBnB,IAAI,GACtBA,IAAI,CAACmB,cADiB,GAEtBxB,eAAe,CAACyB,WAFpB;AAGA,SAAKC,OAAL,GAAerB,IAAI,GAAGA,IAAI,CAACqB,OAAR,GAAkBC,SAArC;AACA,SAAKC,MAAL,GAAcvB,IAAI,GAAGA,IAAI,CAACuB,MAAR,GAAiBD,SAAnC;AACA,SAAKjB,oBAAL,GAA4Bd,sBAAsB,CAChD,KAAK8B,OAD2C,EAEhD,KAAKE,MAF2C,EAGhD,KAAKJ,cAH2C,CAAlD;AAKD;;AAgBY,MAATL,SAAS,GAAG;AACd,WAAO,KAAKV,MAAZ;AACD;;AA/B+B","sourcesContent":["import TransportWebHid from '@ledgerhq/hw-transport-webhid';\nimport {\n  getPublicKey,\n  solana_derivation_path,\n  solana_ledger_sign_bytes,\n  solana_ledger_sign_transaction,\n  solana_ledger_confirm_public_key,\n} from './ledger-core';\nimport { DERIVATION_PATH } from './localStorage';\nimport bs58 from 'bs58';\n\nlet TRANSPORT = null;\n\nexport class LedgerWalletProvider {\n  constructor(args) {\n    this.onDisconnect = (args && args.onDisconnect) || (() => {});\n    this.derivationPath = args\n      ? args.derivationPath\n      : DERIVATION_PATH.bip44Change;\n    this.account = args ? args.account : undefined;\n    this.change = args ? args.change : undefined;\n    this.solanaDerivationPath = solana_derivation_path(\n      this.account,\n      this.change,\n      this.derivationPath,\n    );\n  }\n\n  init = async () => {\n    if (TRANSPORT === null) {\n      TRANSPORT = await TransportWebHid.create();\n    }\n    this.transport = TRANSPORT;\n    this.pubKey = await getPublicKey(this.transport, this.solanaDerivationPath);\n    this.transport.on('disconnect', this.onDisconnect);\n    this.listAddresses = async (walletCount) => {\n      // TODO: read accounts from ledger\n      return [this.pubKey];\n    };\n    return this;\n  };\n\n  get publicKey() {\n    return this.pubKey;\n  }\n\n  signTransaction = async (transaction) => {\n    const sig_bytes = await solana_ledger_sign_transaction(\n      this.transport,\n      this.solanaDerivationPath,\n      transaction,\n    );\n    transaction.addSignature(this.publicKey, sig_bytes);\n    return transaction;\n  };\n\n  createSignature = async (message) => {\n    const sig_bytes = await solana_ledger_sign_bytes(\n      this.transport,\n      this.solanaDerivationPath,\n      message,\n    );\n    return bs58.encode(sig_bytes);\n  };\n\n  confirmPublicKey = async () => {\n    return await solana_ledger_confirm_public_key(\n      this.transport,\n      this.solanaDerivationPath,\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}