{"ast":null,"code":"import { clusterApiUrl } from '@solana/web3.js';\nimport { MAINNET_URL, MAINNET_BACKUP_URL } from '../utils/connection';\nexport const CLUSTERS = [{\n  name: 'mainnet-beta',\n  apiUrl: MAINNET_URL,\n  label: 'Mainnet Beta',\n  clusterSlug: 'mainnet-beta'\n}, {\n  name: 'mainnet-beta-backup',\n  apiUrl: MAINNET_BACKUP_URL,\n  label: 'Mainnet Beta Backup',\n  clusterSlug: 'mainnet-beta'\n}, {\n  name: 'devnet',\n  apiUrl: clusterApiUrl('devnet'),\n  label: 'Devnet',\n  clusterSlug: 'devnet'\n}, {\n  name: 'testnet',\n  apiUrl: clusterApiUrl('testnet'),\n  label: 'Testnet',\n  clusterSlug: 'testnet'\n}, {\n  name: 'localnet',\n  apiUrl: 'http://localhost:8899',\n  label: null,\n  clusterSlug: 'localnet'\n}];\nexport function clusterForEndpoint(endpoint) {\n  return getClusters().find(_ref => {\n    let {\n      apiUrl\n    } = _ref;\n    return apiUrl === endpoint;\n  });\n}\nconst customClusterConfigKey = \"customClusterConfig\";\nexport function addCustomCluster(name, apiUrl) {\n  const stringifiedConfig = JSON.stringify({\n    name: name,\n    label: name,\n    apiUrl: apiUrl,\n    clusterSlug: null\n  });\n  localStorage.setItem(customClusterConfigKey, stringifiedConfig);\n}\nexport function customClusterExists() {\n  return !!localStorage.getItem(customClusterConfigKey);\n}\nexport function getClusters() {\n  const stringifiedConfig = localStorage.getItem(customClusterConfigKey);\n  const config = stringifiedConfig ? JSON.parse(stringifiedConfig) : null;\n  return config ? [...CLUSTERS, config] : CLUSTERS;\n}","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/utils/clusters.js"],"names":["clusterApiUrl","MAINNET_URL","MAINNET_BACKUP_URL","CLUSTERS","name","apiUrl","label","clusterSlug","clusterForEndpoint","endpoint","getClusters","find","customClusterConfigKey","addCustomCluster","stringifiedConfig","JSON","stringify","localStorage","setItem","customClusterExists","getItem","config","parse"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iBAA9B;AACA,SAASC,WAAT,EAAsBC,kBAAtB,QAAgD,qBAAhD;AAEA,OAAO,MAAMC,QAAQ,GAAG,CACtB;AACEC,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,MAAM,EAAEJ,WAFV;AAGEK,EAAAA,KAAK,EAAE,cAHT;AAIEC,EAAAA,WAAW,EAAE;AAJf,CADsB,EAOtB;AACEH,EAAAA,IAAI,EAAE,qBADR;AAEEC,EAAAA,MAAM,EAAEH,kBAFV;AAGII,EAAAA,KAAK,EAAE,qBAHX;AAIEC,EAAAA,WAAW,EAAE;AAJf,CAPsB,EAatB;AACEH,EAAAA,IAAI,EAAE,QADR;AAEEC,EAAAA,MAAM,EAAEL,aAAa,CAAC,QAAD,CAFvB;AAGEM,EAAAA,KAAK,EAAE,QAHT;AAIEC,EAAAA,WAAW,EAAE;AAJf,CAbsB,EAmBtB;AACEH,EAAAA,IAAI,EAAE,SADR;AAEEC,EAAAA,MAAM,EAAEL,aAAa,CAAC,SAAD,CAFvB;AAGEM,EAAAA,KAAK,EAAE,SAHT;AAIEC,EAAAA,WAAW,EAAE;AAJf,CAnBsB,EAyBtB;AACEH,EAAAA,IAAI,EAAE,UADR;AAEEC,EAAAA,MAAM,EAAE,uBAFV;AAGEC,EAAAA,KAAK,EAAE,IAHT;AAIEC,EAAAA,WAAW,EAAE;AAJf,CAzBsB,CAAjB;AAiCP,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAC3C,SAAOC,WAAW,GAAGC,IAAd,CAAmB;AAAA,QAAC;AAAEN,MAAAA;AAAF,KAAD;AAAA,WAAgBA,MAAM,KAAKI,QAA3B;AAAA,GAAnB,CAAP;AACD;AAED,MAAMG,sBAAsB,GAAG,qBAA/B;AAEA,OAAO,SAASC,gBAAT,CAA0BT,IAA1B,EAAgCC,MAAhC,EAAwC;AAC7C,QAAMS,iBAAiB,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACZ,IAAAA,IAAI,EAAEA,IAAP;AAAaE,IAAAA,KAAK,EAAEF,IAApB;AAA0BC,IAAAA,MAAM,EAAEA,MAAlC;AAA0CE,IAAAA,WAAW,EAAE;AAAvD,GAAf,CAA1B;AACAU,EAAAA,YAAY,CAACC,OAAb,CAAqBN,sBAArB,EAA6CE,iBAA7C;AACD;AAED,OAAO,SAASK,mBAAT,GAA+B;AACpC,SAAO,CAAC,CAACF,YAAY,CAACG,OAAb,CAAqBR,sBAArB,CAAT;AACD;AAED,OAAO,SAASF,WAAT,GAAuB;AAC5B,QAAMI,iBAAiB,GAAGG,YAAY,CAACG,OAAb,CAAqBR,sBAArB,CAA1B;AACA,QAAMS,MAAM,GAAGP,iBAAiB,GAAGC,IAAI,CAACO,KAAL,CAAWR,iBAAX,CAAH,GAAmC,IAAnE;AACA,SAAQO,MAAM,GAAG,CAAC,GAAGlB,QAAJ,EAAckB,MAAd,CAAH,GAA2BlB,QAAzC;AACD","sourcesContent":["import { clusterApiUrl } from '@solana/web3.js';\nimport { MAINNET_URL, MAINNET_BACKUP_URL } from '../utils/connection';\n\nexport const CLUSTERS = [\n  {\n    name: 'mainnet-beta',\n    apiUrl: MAINNET_URL,\n    label: 'Mainnet Beta',\n    clusterSlug: 'mainnet-beta',\n  },\n  {\n    name: 'mainnet-beta-backup',\n    apiUrl: MAINNET_BACKUP_URL,\n      label: 'Mainnet Beta Backup',\n    clusterSlug: 'mainnet-beta',\n  },\n  {\n    name: 'devnet',\n    apiUrl: clusterApiUrl('devnet'),\n    label: 'Devnet',\n    clusterSlug: 'devnet',\n  },\n  {\n    name: 'testnet',\n    apiUrl: clusterApiUrl('testnet'),\n    label: 'Testnet',\n    clusterSlug: 'testnet',\n  },\n  {\n    name: 'localnet',\n    apiUrl: 'http://localhost:8899',\n    label: null,\n    clusterSlug: 'localnet',\n  }\n];\n\nexport function clusterForEndpoint(endpoint) {\n  return getClusters().find(({ apiUrl }) => apiUrl === endpoint);\n}\n\nconst customClusterConfigKey = \"customClusterConfig\";\n\nexport function addCustomCluster(name, apiUrl) {\n  const stringifiedConfig = JSON.stringify({name: name, label: name, apiUrl: apiUrl, clusterSlug: null});\n  localStorage.setItem(customClusterConfigKey, stringifiedConfig);\n}\n\nexport function customClusterExists() {\n  return !!localStorage.getItem(customClusterConfigKey)\n}\n\nexport function getClusters() {\n  const stringifiedConfig = localStorage.getItem(customClusterConfigKey);\n  const config = stringifiedConfig ? JSON.parse(stringifiedConfig) : null;\n  return  config ? [...CLUSTERS, config] : CLUSTERS;\n}\n"]},"metadata":{},"sourceType":"module"}