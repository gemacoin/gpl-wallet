{"ast":null,"code":"var _jsxFileName = \"/home/imentus/spl-token-wallet/src/utils/notifications.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useConnection, useGemachainExplorerUrlSuffix } from './connection';\nimport Button from '@material-ui/core/Button';\nimport { confirmTransaction } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function useSendTransaction() {\n  _s();\n\n  const connection = useConnection();\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  const [sending, setSending] = useState(false);\n\n  async function sendTransaction(signaturePromise) {\n    let {\n      onSuccess,\n      onError\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let id = enqueueSnackbar('Sending transaction...', {\n      variant: 'info',\n      persist: true\n    });\n    setSending(true);\n\n    try {\n      let signature = await signaturePromise;\n      closeSnackbar(id);\n      id = enqueueSnackbar('Confirming transaction...', {\n        variant: 'info',\n        persist: true,\n        action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n          signature: signature\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 17\n        }, this)\n      });\n      await confirmTransaction(connection, signature);\n      closeSnackbar(id);\n      setSending(false);\n      enqueueSnackbar('Transaction confirmed', {\n        variant: 'success',\n        autoHideDuration: 15000,\n        action: /*#__PURE__*/_jsxDEV(ViewTransactionOnExplorerButton, {\n          signature: signature\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this)\n      });\n\n      if (onSuccess) {\n        onSuccess(signature);\n      }\n    } catch (e) {\n      closeSnackbar(id);\n      setSending(false);\n      console.warn(e);\n      enqueueSnackbar(e.message, {\n        variant: 'error'\n      });\n\n      if (onError) {\n        onError(e);\n      }\n    }\n  }\n\n  return [sendTransaction, sending];\n}\n\n_s(useSendTransaction, \"KshoD9FFTNKsCk1HhHxNi9kE56g=\", false, function () {\n  return [useConnection, useSnackbar];\n});\n\nfunction ViewTransactionOnExplorerButton(_ref) {\n  _s2();\n\n  let {\n    signature\n  } = _ref;\n  const urlSuffix = useGemachainExplorerUrlSuffix();\n  return /*#__PURE__*/_jsxDEV(Button, {\n    color: \"inherit\",\n    component: \"a\",\n    target: \"_blank\",\n    rel: \"noopener\",\n    href: `https://solscan.io/tx/${signature}` + urlSuffix,\n    children: \"View on Solscan\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ViewTransactionOnExplorerButton, \"RuB7n10KBrw1XqyAa9keavC7wFM=\", false, function () {\n  return [useGemachainExplorerUrlSuffix];\n});\n\n_c = ViewTransactionOnExplorerButton;\nexport function useCallAsync() {\n  _s3();\n\n  const {\n    enqueueSnackbar,\n    closeSnackbar\n  } = useSnackbar();\n  return async function callAsync(promise) {\n    let {\n      progressMessage = 'Submitting...',\n      successMessage = 'Success',\n      onSuccess,\n      onError\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let id = enqueueSnackbar(progressMessage, {\n      variant: 'info',\n      persist: true\n    });\n\n    try {\n      let result = await promise;\n      closeSnackbar(id);\n\n      if (successMessage) {\n        enqueueSnackbar(successMessage, {\n          variant: 'success'\n        });\n      }\n\n      if (onSuccess) {\n        onSuccess(result);\n      }\n    } catch (e) {\n      console.warn(e);\n      closeSnackbar(id);\n      enqueueSnackbar(e.message, {\n        variant: 'error'\n      });\n\n      if (onError) {\n        onError(e);\n      }\n    }\n  };\n}\n\n_s3(useCallAsync, \"cLw1NvfAu36DUMQTemMFXpkNHzk=\", false, function () {\n  return [useSnackbar];\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewTransactionOnExplorerButton\");","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/utils/notifications.js"],"names":["React","useState","useSnackbar","useConnection","useGemachainExplorerUrlSuffix","Button","confirmTransaction","useSendTransaction","connection","enqueueSnackbar","closeSnackbar","sending","setSending","sendTransaction","signaturePromise","onSuccess","onError","id","variant","persist","signature","action","autoHideDuration","e","console","warn","message","ViewTransactionOnExplorerButton","urlSuffix","useCallAsync","callAsync","promise","progressMessage","successMessage","result"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useSnackbar } from 'notistack';\nimport { useConnection, useGemachainExplorerUrlSuffix } from './connection';\nimport Button from '@material-ui/core/Button';\nimport { confirmTransaction } from './utils';\n\nexport function useSendTransaction() {\n  const connection = useConnection();\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  const [sending, setSending] = useState(false);\n\n  async function sendTransaction(\n    signaturePromise,\n    { onSuccess, onError } = {},\n  ) {\n    let id = enqueueSnackbar('Sending transaction...', {\n      variant: 'info',\n      persist: true,\n    });\n    setSending(true);\n    try {\n      let signature = await signaturePromise;\n      closeSnackbar(id);\n      id = enqueueSnackbar('Confirming transaction...', {\n        variant: 'info',\n        persist: true,\n        action: <ViewTransactionOnExplorerButton signature={signature} />,\n      });\n      await confirmTransaction(connection, signature);\n      closeSnackbar(id);\n      setSending(false);\n      enqueueSnackbar('Transaction confirmed', {\n        variant: 'success',\n        autoHideDuration: 15000,\n        action: <ViewTransactionOnExplorerButton signature={signature} />,\n      });\n      if (onSuccess) {\n        onSuccess(signature);\n      }\n    } catch (e) {\n      closeSnackbar(id);\n      setSending(false);\n      console.warn(e);\n      enqueueSnackbar(e.message, { variant: 'error' });\n      if (onError) {\n        onError(e);\n      }\n    }\n  }\n\n  return [sendTransaction, sending];\n}\n\nfunction ViewTransactionOnExplorerButton({ signature }) {\n  const urlSuffix = useGemachainExplorerUrlSuffix();\n  return (\n    <Button\n      color=\"inherit\"\n      component=\"a\"\n      target=\"_blank\"\n      rel=\"noopener\"\n      href={`https://solscan.io/tx/${signature}` + urlSuffix}\n    >\n      View on Solscan\n    </Button>\n  );\n}\n\nexport function useCallAsync() {\n  const { enqueueSnackbar, closeSnackbar } = useSnackbar();\n  return async function callAsync(\n    promise,\n    {\n      progressMessage = 'Submitting...',\n      successMessage = 'Success',\n      onSuccess,\n      onError,\n    } = {},\n  ) {\n    let id = enqueueSnackbar(progressMessage, {\n      variant: 'info',\n      persist: true,\n    });\n    try {\n      let result = await promise;\n      closeSnackbar(id);\n      if (successMessage) {\n        enqueueSnackbar(successMessage, { variant: 'success' });\n      }\n      if (onSuccess) {\n        onSuccess(result);\n      }\n    } catch (e) {\n      console.warn(e);\n      closeSnackbar(id);\n      enqueueSnackbar(e.message, { variant: 'error' });\n      if (onError) {\n        onError(e);\n      }\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}