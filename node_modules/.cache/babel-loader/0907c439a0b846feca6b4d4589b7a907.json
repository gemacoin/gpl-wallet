{"ast":null,"code":"var _jsxFileName = \"/home/imentus/spl-token-wallet/src/components/SendDialog.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { useWallet, useWalletAddressForMint } from '../utils/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport { ConnectToMetamaskButton, getErc20Balance, useEthAccount, withdrawEth } from '../utils/swap/eth';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { TOKEN_PROGRAM_ID, WRAPPED_GEMA_MINT } from '../utils/tokens/instructions';\nimport { parseTokenAccountData } from '../utils/tokens/data';\nimport { Switch, Tooltip } from '@material-ui/core';\nimport { EthFeeEstimate } from './EthFeeEstimate';\nimport { resolveDomainName, resolveTwitterHandle } from '../utils/name-service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WUSDC_MINT = new PublicKey('BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW');\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\nconst WUSDT_MINT = new PublicKey('BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4');\nconst USDT_MINT = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\nconst DISABLED_ERC20_MINTS = new Set(['kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6', 'ABE7D8RU1eHfCJWzHYZZeymeE8k9nPPXfqge2NQYyKoL']);\nexport default function SendDialog(_ref) {\n  _s();\n\n  var _swapCoinInfo, _swapCoinInfo2;\n\n  let {\n    open,\n    onClose,\n    publicKey,\n    balanceInfo\n  } = _ref;\n  const isProdNetwork = useIsProdNetwork();\n  const [tab, setTab] = useState('spl');\n  const onSubmitRef = useRef();\n  let [swapCoinInfo] = useSwapApiGet(showSwapAddress && balanceInfo.mint && isProdNetwork ? `coins/gema/${balanceInfo.mint.toBase58()}` : null); // SwapInfos to ignore.\n\n  if (swapCoinInfo && swapCoinInfo.erc20Contract === '0x2b2e04bf86978b45bb2edf54aca876973bdd43c0') {\n    swapCoinInfo = null;\n  }\n\n  const ethAccount = useEthAccount();\n  const {\n    mint,\n    tokenName,\n    tokenSymbol\n  } = balanceInfo;\n\n  const getTabs = mint => {\n    if (mint === null || mint === void 0 ? void 0 : mint.equals(WUSDC_MINT)) {\n      return [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"GPL WUSDC\",\n        value: \"spl\"\n      }, \"spl\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"GPL USDC\",\n        value: \"wusdcToSplUsdc\"\n      }, \"wusdcToSplUsdc\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"ERC20 USDC\",\n        value: \"swap\"\n      }, \"swap\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)];\n    } else if (mint === null || mint === void 0 ? void 0 : mint.equals(WUSDT_MINT)) {\n      return [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"GPL WUSDT\",\n        value: \"spl\"\n      }, \"spl\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"GPL USDT\",\n        value: \"wusdtToSplUsdt\"\n      }, \"wusdtToSplUsdt\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"ERC20 USDT\",\n        value: \"swap\"\n      }, \"swap\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)];\n    } else if (localStorage.getItem('sollet-private') && (mint === null || mint === void 0 ? void 0 : mint.equals(USDC_MINT))) {\n      return [/*#__PURE__*/_jsxDEV(Tab, {\n        label: \"GPL USDC\",\n        value: \"spl\"\n      }, \"spl\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"GPL WUSDC\",\n        value: \"usdcToSplWUsdc\"\n      }, \"usdcToSplWUsdc\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tab, {\n        label: \"ERC20 USDC\",\n        value: \"swap\"\n      }, \"swap\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)];\n    } else {\n      const erc20Tab = /*#__PURE__*/_jsxDEV(Tab, {\n        label: `${swapCoinInfo.erc20Contract ? 'ERC20' : 'Native'} ${swapCoinInfo.ticker}`,\n        value: \"swap\"\n      }, \"swap\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this);\n\n      const tabs = [/*#__PURE__*/_jsxDEV(Tab, {\n        label: `GPL ${swapCoinInfo.ticker}`,\n        value: \"spl\"\n      }, \"spl\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)];\n\n      if (!DISABLED_ERC20_MINTS.has(mint.toString()) || localStorage.getItem('sollet-private')) {\n        tabs.push(erc20Tab);\n      }\n\n      return tabs;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogForm, {\n      open: open,\n      onClose: onClose,\n      onSubmit: () => onSubmitRef.current(),\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: [\"Send \", tokenName !== null && tokenName !== void 0 ? tokenName : abbreviateAddress(mint), tokenSymbol ? ` (${tokenSymbol})` : null, ethAccount && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            color: \"textSecondary\",\n            style: {\n              fontSize: '14px'\n            },\n            children: [\"Metamask connected: \", ethAccount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), swapCoinInfo ? /*#__PURE__*/_jsxDEV(Tabs, {\n        value: tab,\n        variant: \"fullWidth\",\n        onChange: (e, value) => setTab(value),\n        textColor: \"primary\",\n        indicatorColor: \"primary\",\n        children: getTabs(mint)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this) : null, tab === 'spl' ? /*#__PURE__*/_jsxDEV(SendSplDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        onSubmitRef: onSubmitRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this) : tab === 'wusdcToSplUsdc' ? /*#__PURE__*/_jsxDEV(SendSwapDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        swapCoinInfo: swapCoinInfo,\n        onSubmitRef: onSubmitRef,\n        wusdcToSplUsdc: true\n      }, tab, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this) : tab === 'wusdtToSplUsdt' ? /*#__PURE__*/_jsxDEV(SendSwapDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        swapCoinInfo: swapCoinInfo,\n        onSubmitRef: onSubmitRef,\n        wusdtToSplUsdt: true\n      }, tab, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this) : tab === 'usdcToSplWUsdc' ? /*#__PURE__*/_jsxDEV(SendSwapDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        swapCoinInfo: swapCoinInfo,\n        onSubmitRef: onSubmitRef,\n        usdcToSplWUsdc: true\n      }, tab, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(SendSwapDialog, {\n        onClose: onClose,\n        publicKey: publicKey,\n        balanceInfo: balanceInfo,\n        swapCoinInfo: swapCoinInfo,\n        ethAccount: ethAccount,\n        onSubmitRef: onSubmitRef\n      }, tab, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), ethAccount && (((_swapCoinInfo = swapCoinInfo) === null || _swapCoinInfo === void 0 ? void 0 : _swapCoinInfo.blockchain) === 'eth' || ((_swapCoinInfo2 = swapCoinInfo) === null || _swapCoinInfo2 === void 0 ? void 0 : _swapCoinInfo2.erc20Contract)) ? /*#__PURE__*/_jsxDEV(EthWithdrawalCompleter, {\n      ethAccount: ethAccount,\n      publicKey: publicKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}\n\n_s(SendDialog, \"YEfY5C/aMclaJlAeHReIHo5vxPo=\", false, function () {\n  return [useIsProdNetwork, useSwapApiGet, useEthAccount];\n});\n\n_c = SendDialog;\n\nfunction SendSplDialog(_ref2) {\n  _s2();\n\n  let {\n    onClose,\n    publicKey,\n    balanceInfo,\n    onSubmitRef\n  } = _ref2;\n  const defaultAddressHelperText = !balanceInfo.mint || balanceInfo.mint.equals(WRAPPED_GEMA_MINT) ? 'Enter Solana Address' : 'Enter GPL token or Solana address';\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [addressHelperText, setAddressHelperText] = useState(defaultAddressHelperText);\n  const [passValidation, setPassValidation] = useState();\n  const [overrideDestinationCheck, setOverrideDestinationCheck] = useState(false);\n  const [shouldShowOverride, setShouldShowOverride] = useState();\n  let {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    validAmount\n  } = useForm(balanceInfo, addressHelperText, passValidation);\n  const {\n    decimals,\n    mint\n  } = balanceInfo;\n  const mintString = mint && mint.toBase58();\n  const [isDomainName, setIsDomainName] = useState(false);\n  const [domainOwner, setDomainOwner] = useState();\n  useEffect(() => {\n    (async () => {\n      if (destinationAddress.startsWith('@')) {\n        const twitterOwner = await resolveTwitterHandle(wallet.connection, destinationAddress.slice(1));\n\n        if (!twitterOwner) {\n          setAddressHelperText(`This Twitter handle is not registered`);\n          setPassValidation(undefined);\n          setShouldShowOverride(undefined);\n          return;\n        }\n\n        setIsDomainName(true);\n        setDomainOwner(twitterOwner);\n      }\n\n      if (destinationAddress.endsWith('.gema')) {\n        const domainOwner = await resolveDomainName(wallet.connection, destinationAddress.slice(0, -4));\n\n        if (!domainOwner) {\n          setAddressHelperText(`This domain name is not registered`);\n          setPassValidation(undefined);\n          setShouldShowOverride(undefined);\n          return;\n        }\n\n        setIsDomainName(true);\n        setDomainOwner(domainOwner);\n      }\n\n      if (!destinationAddress) {\n        setAddressHelperText(defaultAddressHelperText);\n        setPassValidation(undefined);\n        setShouldShowOverride(undefined);\n        return;\n      }\n\n      try {\n        const destinationAccountInfo = await wallet.connection.getAccountInfo(new PublicKey(isDomainName ? domainOwner : destinationAddress));\n        setShouldShowOverride(false);\n\n        if (destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n          const accountInfo = parseTokenAccountData(destinationAccountInfo.data);\n\n          if (accountInfo.mint.toBase58() === mintString) {\n            setPassValidation(true);\n            setAddressHelperText('Address is a valid GPL token address');\n          } else {\n            setPassValidation(false);\n            setAddressHelperText('Destination address mint does not match');\n          }\n        } else {\n          setPassValidation(true);\n          setAddressHelperText(`Destination is a Solana address: ${isDomainName ? domainOwner : destinationAddress}`);\n        }\n      } catch (e) {\n        console.log(`Received error validating address ${e}`);\n        setAddressHelperText(defaultAddressHelperText);\n        setShouldShowOverride(true);\n        setPassValidation(undefined);\n      }\n    })(); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [destinationAddress, wallet, mintString, isDomainName, domainOwner]);\n  useEffect(() => {\n    return () => {\n      setOverrideDestinationCheck(false);\n    };\n  }, [setOverrideDestinationCheck]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n\n    return wallet.transferToken(publicKey, new PublicKey(isDomainName ? domainOwner : destinationAddress), amount, balanceInfo.mint, decimals, null, overrideDestinationCheck);\n  }\n\n  const disabled = shouldShowOverride ? !overrideDestinationCheck || sending || !validAmount : sending || !validAmount;\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), {\n      onSuccess: onClose\n    });\n  }\n\n  onSubmitRef.current = onSubmit;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n      children: fields\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [shouldShowOverride && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          'align-items': 'center',\n          display: 'flex',\n          'text-align': 'left'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"This address has no funds. Are you sure it's correct?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          checked: overrideDestinationCheck,\n          onChange: e => setOverrideDestinationCheck(e.target.checked),\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        color: \"primary\",\n        disabled: disabled,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(SendSplDialog, \"Y+tbG/mDIw/4TN9vVebQ/DlJbyM=\", false, function () {\n  return [useWallet, useSendTransaction, useForm];\n});\n\n_c2 = SendSplDialog;\n\nfunction SendSwapDialog(_ref3) {\n  _s3();\n\n  let {\n    onClose,\n    publicKey,\n    balanceInfo,\n    swapCoinInfo,\n    ethAccount,\n    wusdcToSplUsdc = false,\n    wusdtToSplUsdt = false,\n    usdcToSplWUsdc = false,\n    onSubmitRef\n  } = _ref3;\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [signature, setSignature] = useState(null);\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount\n  } = useForm(balanceInfo);\n  const {\n    tokenName,\n    decimals,\n    mint\n  } = balanceInfo;\n  const blockchain = wusdcToSplUsdc || wusdtToSplUsdt || usdcToSplWUsdc ? 'gema' : swapCoinInfo.blockchain === 'gema' ? 'eth' : swapCoinInfo.blockchain;\n  const needMetamask = blockchain === 'eth';\n  const [ethBalance] = useAsyncData(() => getErc20Balance(ethAccount), 'ethBalance', {\n    refreshInterval: 2000\n  });\n  const ethFeeData = useSwapApiGet(blockchain === 'eth' && `fees/eth/${ethAccount}` + (swapCoinInfo.erc20Contract ? '/' + swapCoinInfo.erc20Contract : ''), {\n    refreshInterval: 2000\n  });\n  const [ethFeeEstimate] = ethFeeData;\n  const insufficientEthBalance = typeof ethBalance === 'number' && typeof ethFeeEstimate === 'number' && ethBalance < ethFeeEstimate;\n  useEffect(() => {\n    if (blockchain === 'eth' && ethAccount) {\n      setDestinationAddress(ethAccount);\n    }\n  }, [blockchain, ethAccount, setDestinationAddress]);\n  let splUsdcWalletAddress = useWalletAddressForMint(wusdcToSplUsdc ? USDC_MINT : null);\n  let splUsdtWalletAddress = useWalletAddressForMint(wusdtToSplUsdt ? USDT_MINT : null);\n  let splWUsdcWalletAddress = useWalletAddressForMint(usdcToSplWUsdc ? WUSDC_MINT : null);\n  useEffect(() => {\n    if (wusdcToSplUsdc && splUsdcWalletAddress) {\n      setDestinationAddress(splUsdcWalletAddress);\n    } else if (wusdtToSplUsdt && splUsdtWalletAddress) {\n      setDestinationAddress(splUsdtWalletAddress);\n    } else if (usdcToSplWUsdc && splWUsdcWalletAddress) {\n      setDestinationAddress(splWUsdcWalletAddress);\n    }\n  }, [setDestinationAddress, wusdcToSplUsdc, splUsdcWalletAddress, wusdtToSplUsdt, splUsdtWalletAddress, usdcToSplWUsdc, splWUsdcWalletAddress]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n\n    const params = {\n      blockchain,\n      address: destinationAddress,\n      size: amount / 10 ** decimals\n    };\n\n    if (blockchain === 'gema') {\n      params.coin = swapCoinInfo.splMint;\n    } else if (blockchain === 'eth') {\n      params.coin = swapCoinInfo.erc20Contract;\n    }\n\n    if (mint === null || mint === void 0 ? void 0 : mint.equals(WUSDC_MINT)) {\n      params.wusdcToUsdc = true;\n    } else if (mint === null || mint === void 0 ? void 0 : mint.equals(USDC_MINT)) {\n      if (usdcToSplWUsdc) {\n        params.usdcToWUsdc = true;\n        params.coin = WUSDC_MINT.toString();\n      }\n    } else if (mint === null || mint === void 0 ? void 0 : mint.equals(WUSDT_MINT)) {\n      params.wusdtToUsdt = true;\n    }\n\n    const swapInfo = await swapApiRequest('POST', 'swap_to', params);\n\n    if (swapInfo.blockchain !== 'gema') {\n      throw new Error('Unexpected blockchain');\n    }\n\n    return wallet.transferToken(publicKey, new PublicKey(swapInfo.address), amount, balanceInfo.mint, decimals, swapInfo.memo);\n  }\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), {\n      onSuccess: setSignature\n    });\n  }\n\n  onSubmitRef.current = onSubmit;\n\n  if (signature) {\n    return /*#__PURE__*/_jsxDEV(SendSwapProgress, {\n      publicKey: publicKey,\n      signature: signature,\n      blockchain: blockchain,\n      onClose: onClose\n    }, signature, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this);\n  }\n\n  const bitcoinDisable = blockchain === 'btc' ? parseFloat(transferAmountString) < 0.001 : false;\n\n  let sendButton = /*#__PURE__*/_jsxDEV(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    disabled: sending || needMetamask && !ethAccount || !validAmount || insufficientEthBalance || bitcoinDisable,\n    children: \"Send\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 502,\n    columnNumber: 5\n  }, this);\n\n  if (insufficientEthBalance) {\n    sendButton = /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: \"Insufficient ETH for withdrawal transaction fee\",\n      placement: \"top\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: sendButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n      style: {\n        paddingTop: 16\n      },\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: [\"GPL \", tokenName, \" can be converted to\", ' ', blockchain === 'eth' && swapCoinInfo.erc20Contract ? 'ERC20' : blockchain === 'gema' && swapCoinInfo.splMint ? 'GPL' : 'native', ' ', swapCoinInfo.ticker, needMetamask ? ' via MetaMask' : null, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, this), blockchain === 'eth' && /*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: [\"Estimated withdrawal transaction fee:\", /*#__PURE__*/_jsxDEV(EthFeeEstimate, {\n          ethFeeData: ethFeeData,\n          insufficientEthBalance: insufficientEthBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 11\n      }, this), needMetamask && !ethAccount ? /*#__PURE__*/_jsxDEV(ConnectToMetamaskButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 40\n      }, this) : fields]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this), sendButton]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s3(SendSwapDialog, \"R5FNB7g62oD++PNwEExJPH//LeQ=\", false, function () {\n  return [useWallet, useSendTransaction, useForm, useAsyncData, useSwapApiGet, useWalletAddressForMint, useWalletAddressForMint, useWalletAddressForMint];\n});\n\n_c3 = SendSwapDialog;\n\nfunction SendSwapProgress(_ref4) {\n  _s4();\n\n  let {\n    publicKey,\n    signature,\n    onClose,\n    blockchain\n  } = _ref4;\n  const connection = useConnection();\n  const [swaps] = useSwapApiGet(`swaps_from/gema/${publicKey.toBase58()}`, {\n    refreshInterval: 1000\n  });\n  const [confirms] = useAsyncData(async () => {\n    const {\n      value\n    } = await connection.getSignatureStatus(signature);\n    return value === null || value === void 0 ? void 0 : value.confirmations;\n  }, [connection.getSignatureStatus, signature], {\n    refreshInterval: 2000\n  });\n  let step = 1;\n  let ethTxid = null;\n\n  for (let swap of swaps || []) {\n    const {\n      deposit,\n      withdrawal\n    } = swap;\n\n    if (deposit.txid === signature) {\n      var _withdrawal$txid;\n\n      if ((_withdrawal$txid = withdrawal.txid) === null || _withdrawal$txid === void 0 ? void 0 : _withdrawal$txid.startsWith('0x')) {\n        step = 3;\n        ethTxid = withdrawal.txid;\n      } else if (withdrawal.txid && blockchain !== 'eth') {\n        step = 3;\n      } else {\n        step = 2;\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n      children: [/*#__PURE__*/_jsxDEV(Stepper, {\n        activeStep: step,\n        children: [/*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: \"Send Request\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: \"Wait for Confirmations\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 598,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Step, {\n          children: /*#__PURE__*/_jsxDEV(StepLabel, {\n            children: \"Withdraw Funds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this), ethTxid ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        align: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: `https://etherscan.io/tx/${ethTxid}`,\n          target: \"_blank\",\n          rel: \"noopener\",\n          children: \"View on Etherscan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 11\n      }, this) : step < 3 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 16\n          },\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 13\n        }, this), confirms ? /*#__PURE__*/_jsxDEV(Typography, {\n          children: [confirms, \" / 35 Confirmations\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n          children: \"Transaction Pending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 11\n      }, this) : null, !ethTxid && blockchain === 'eth' ? /*#__PURE__*/_jsxDEV(DialogContentText, {\n        style: {\n          marginTop: 16,\n          marginBottom: 0\n        },\n        children: \"Please keep this window open. You will need to approve the request on MetaMask to complete the transaction.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s4(SendSwapProgress, \"OzhexDb61UfI3C/dk5IUcX4AHfs=\", false, function () {\n  return [useConnection, useSwapApiGet, useAsyncData];\n});\n\n_c4 = SendSwapProgress;\n\nfunction useForm(balanceInfo, addressHelperText, passAddressValidation, overrideValidation) {\n  _s5();\n\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [transferAmountString, setTransferAmountString] = useState('');\n  const {\n    amount: balanceAmount,\n    decimals,\n    tokenSymbol\n  } = balanceInfo;\n  const parsedAmount = parseFloat(transferAmountString) * 10 ** decimals;\n  const validAmount = parsedAmount > 0 && parsedAmount <= balanceAmount;\n\n  const fields = /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Recipient Address\",\n      fullWidth: true,\n      variant: \"outlined\",\n      margin: \"normal\",\n      value: destinationAddress,\n      onChange: e => setDestinationAddress(e.target.value.trim()),\n      helperText: addressHelperText,\n      id: !passAddressValidation && passAddressValidation !== undefined ? 'outlined-error-helper-text' : undefined,\n      error: !passAddressValidation && passAddressValidation !== undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 661,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Amount\",\n      fullWidth: true,\n      variant: \"outlined\",\n      margin: \"normal\",\n      type: \"number\",\n      InputProps: {\n        endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"end\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setTransferAmountString(balanceAmountToUserAmount(balanceAmount, decimals)),\n            children: \"MAX\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 15\n          }, this), tokenSymbol ? tokenSymbol : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 13\n        }, this),\n        inputProps: {\n          step: Math.pow(10, -decimals)\n        }\n      },\n      value: transferAmountString,\n      onChange: e => setTransferAmountString(e.target.value.trim()),\n      helperText: /*#__PURE__*/_jsxDEV(\"span\", {\n        onClick: () => setTransferAmountString(balanceAmountToUserAmount(balanceAmount, decimals)),\n        children: [\"Max: \", balanceAmountToUserAmount(balanceAmount, decimals)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  return {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount\n  };\n}\n\n_s5(useForm, \"/xFUMruBNHBOEcyIyi1UhuDugck=\");\n\nfunction balanceAmountToUserAmount(balanceAmount, decimals) {\n  return (balanceAmount / Math.pow(10, decimals)).toFixed(decimals);\n}\n\nfunction EthWithdrawalCompleter(_ref5) {\n  _s6();\n\n  let {\n    ethAccount,\n    publicKey\n  } = _ref5;\n  const [swaps] = useSwapApiGet(`swaps_from/gema/${publicKey.toBase58()}`, {\n    refreshInterval: 10000\n  });\n\n  if (!swaps) {\n    return null;\n  }\n\n  return swaps.map(swap => /*#__PURE__*/_jsxDEV(EthWithdrawalCompleterItem, {\n    ethAccount: ethAccount,\n    swap: swap\n  }, swap.deposit.txid, false, {\n    fileName: _jsxFileName,\n    lineNumber: 739,\n    columnNumber: 5\n  }, this));\n}\n\n_s6(EthWithdrawalCompleter, \"/yLo+lMKfNmEYkV4tgAkZceCzUw=\", false, function () {\n  return [useSwapApiGet];\n});\n\n_c5 = EthWithdrawalCompleter;\n\nfunction EthWithdrawalCompleterItem(_ref6) {\n  _s7();\n\n  let {\n    ethAccount,\n    swap\n  } = _ref6;\n  const callAsync = useCallAsync();\n  const {\n    withdrawal\n  } = swap;\n  useEffect(() => {\n    if (withdrawal.status === 'sent' && withdrawal.blockchain === 'eth' && withdrawal.txid && !withdrawal.txid.startsWith('0x') && withdrawal.txData) {\n      withdrawEth(ethAccount, withdrawal, callAsync);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [withdrawal.txid, withdrawal.status]);\n  return null;\n}\n\n_s7(EthWithdrawalCompleterItem, \"7Vo4NSShDl/nPizzxYfOt/ptmLI=\", false, function () {\n  return [useCallAsync];\n});\n\n_c6 = EthWithdrawalCompleterItem;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"SendDialog\");\n$RefreshReg$(_c2, \"SendSplDialog\");\n$RefreshReg$(_c3, \"SendSwapDialog\");\n$RefreshReg$(_c4, \"SendSwapProgress\");\n$RefreshReg$(_c5, \"EthWithdrawalCompleter\");\n$RefreshReg$(_c6, \"EthWithdrawalCompleterItem\");","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/components/SendDialog.js"],"names":["React","useEffect","useRef","useState","DialogActions","Button","DialogTitle","DialogContent","TextField","DialogForm","useWallet","useWalletAddressForMint","PublicKey","abbreviateAddress","InputAdornment","useCallAsync","useSendTransaction","swapApiRequest","useSwapApiGet","showSwapAddress","Tabs","Tab","DialogContentText","ConnectToMetamaskButton","getErc20Balance","useEthAccount","withdrawEth","useConnection","useIsProdNetwork","Stepper","Step","StepLabel","Link","Typography","useAsyncData","CircularProgress","TOKEN_PROGRAM_ID","WRAPPED_GEMA_MINT","parseTokenAccountData","Switch","Tooltip","EthFeeEstimate","resolveDomainName","resolveTwitterHandle","WUSDC_MINT","USDC_MINT","WUSDT_MINT","USDT_MINT","DISABLED_ERC20_MINTS","Set","SendDialog","open","onClose","publicKey","balanceInfo","isProdNetwork","tab","setTab","onSubmitRef","swapCoinInfo","mint","toBase58","erc20Contract","ethAccount","tokenName","tokenSymbol","getTabs","equals","localStorage","getItem","erc20Tab","ticker","tabs","has","toString","push","current","fontSize","e","value","blockchain","SendSplDialog","defaultAddressHelperText","wallet","sendTransaction","sending","addressHelperText","setAddressHelperText","passValidation","setPassValidation","overrideDestinationCheck","setOverrideDestinationCheck","shouldShowOverride","setShouldShowOverride","fields","destinationAddress","transferAmountString","validAmount","useForm","decimals","mintString","isDomainName","setIsDomainName","domainOwner","setDomainOwner","startsWith","twitterOwner","connection","slice","undefined","endsWith","destinationAccountInfo","getAccountInfo","owner","accountInfo","data","console","log","makeTransaction","amount","Math","round","parseFloat","Error","transferToken","disabled","onSubmit","onSuccess","display","target","checked","SendSwapDialog","wusdcToSplUsdc","wusdtToSplUsdt","usdcToSplWUsdc","signature","setSignature","setDestinationAddress","needMetamask","ethBalance","refreshInterval","ethFeeData","ethFeeEstimate","insufficientEthBalance","splUsdcWalletAddress","splUsdtWalletAddress","splWUsdcWalletAddress","params","address","size","coin","splMint","wusdcToUsdc","usdcToWUsdc","wusdtToUsdt","swapInfo","memo","bitcoinDisable","sendButton","paddingTop","SendSwapProgress","swaps","confirms","getSignatureStatus","confirmations","step","ethTxid","swap","deposit","withdrawal","txid","justifyContent","alignItems","marginRight","marginTop","marginBottom","passAddressValidation","overrideValidation","setTransferAmountString","balanceAmount","parsedAmount","trim","endAdornment","balanceAmountToUserAmount","inputProps","pow","toFixed","EthWithdrawalCompleter","map","EthWithdrawalCompleterItem","callAsync","status","txData"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport TextField from '@material-ui/core/TextField';\nimport DialogForm from './DialogForm';\nimport { useWallet, useWalletAddressForMint } from '../utils/wallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { abbreviateAddress } from '../utils/utils';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { swapApiRequest, useSwapApiGet } from '../utils/swap/api';\nimport { showSwapAddress } from '../utils/config';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  useEthAccount,\n  withdrawEth,\n} from '../utils/swap/eth';\nimport { useConnection, useIsProdNetwork } from '../utils/connection';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport {\n  TOKEN_PROGRAM_ID,\n  WRAPPED_GEMA_MINT,\n} from '../utils/tokens/instructions';\nimport { parseTokenAccountData } from '../utils/tokens/data';\nimport { Switch, Tooltip } from '@material-ui/core';\nimport { EthFeeEstimate } from './EthFeeEstimate';\nimport { resolveDomainName, resolveTwitterHandle } from '../utils/name-service';\n\nconst WUSDC_MINT = new PublicKey(\n  'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n);\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\n\nconst WUSDT_MINT = new PublicKey(\n  'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n);\n\nconst USDT_MINT = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\nconst DISABLED_ERC20_MINTS = new Set([\n  'kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6',\n  'ABE7D8RU1eHfCJWzHYZZeymeE8k9nPPXfqge2NQYyKoL',\n]);\n\nexport default function SendDialog({ open, onClose, publicKey, balanceInfo }) {\n  const isProdNetwork = useIsProdNetwork();\n  const [tab, setTab] = useState('spl');\n  const onSubmitRef = useRef();\n\n  let [swapCoinInfo] = useSwapApiGet(\n    showSwapAddress && balanceInfo.mint && isProdNetwork\n      ? `coins/gema/${balanceInfo.mint.toBase58()}`\n      : null,\n  );\n\n  // SwapInfos to ignore.\n  if (swapCoinInfo && swapCoinInfo.erc20Contract === '0x2b2e04bf86978b45bb2edf54aca876973bdd43c0') {\n    swapCoinInfo = null;\n  }\n\n  const ethAccount = useEthAccount();\n  const { mint, tokenName, tokenSymbol } = balanceInfo;\n\n  const getTabs = (mint) => {\n    if (mint?.equals(WUSDC_MINT)) {\n      return [\n        <Tab label=\"GPL WUSDC\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"GPL USDC\" key=\"wusdcToSplUsdc\" value=\"wusdcToSplUsdc\" />,\n        <Tab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else if (mint?.equals(WUSDT_MINT)) {\n      return [\n        <Tab label=\"GPL WUSDT\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"GPL USDT\" key=\"wusdtToSplUsdt\" value=\"wusdtToSplUsdt\" />,\n        <Tab label=\"ERC20 USDT\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else if (\n      localStorage.getItem('sollet-private') &&\n      mint?.equals(USDC_MINT)\n    ) {\n      return [\n        <Tab label=\"GPL USDC\" key=\"spl\" value=\"spl\" />,\n        <Tab label=\"GPL WUSDC\" key=\"usdcToSplWUsdc\" value=\"usdcToSplWUsdc\" />,\n        <Tab label=\"ERC20 USDC\" key=\"swap\" value=\"swap\" />,\n      ];\n    } else {\n      const erc20Tab = (\n        <Tab\n          label={`${swapCoinInfo.erc20Contract ? 'ERC20' : 'Native'} ${\n            swapCoinInfo.ticker\n          }`}\n          key=\"swap\"\n          value=\"swap\"\n        />\n      );\n      const tabs = [\n        <Tab label={`GPL ${swapCoinInfo.ticker}`} key=\"spl\" value=\"spl\" />,\n      ];\n      if (\n        !DISABLED_ERC20_MINTS.has(mint.toString()) ||\n        localStorage.getItem('sollet-private')\n      ) {\n        tabs.push(erc20Tab);\n      }\n      return tabs;\n    }\n  };\n\n  return (\n    <>\n      <DialogForm\n        open={open}\n        onClose={onClose}\n        onSubmit={() => onSubmitRef.current()}\n        fullWidth\n      >\n        <DialogTitle>\n          Send {tokenName ?? abbreviateAddress(mint)}\n          {tokenSymbol ? ` (${tokenSymbol})` : null}\n          {ethAccount && (\n            <div>\n              <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n                Metamask connected: {ethAccount}\n              </Typography>\n            </div>\n          )}\n        </DialogTitle>\n        {swapCoinInfo ? (\n          <Tabs\n            value={tab}\n            variant=\"fullWidth\"\n            onChange={(e, value) => setTab(value)}\n            textColor=\"primary\"\n            indicatorColor=\"primary\"\n          >\n            {getTabs(mint)}\n          </Tabs>\n        ) : null}\n        {tab === 'spl' ? (\n          <SendSplDialog\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            onSubmitRef={onSubmitRef}\n          />\n        ) : tab === 'wusdcToSplUsdc' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            wusdcToSplUsdc\n          />\n        ) : tab === 'wusdtToSplUsdt' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            wusdtToSplUsdt\n          />\n        ) : tab === 'usdcToSplWUsdc' ? (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            onSubmitRef={onSubmitRef}\n            usdcToSplWUsdc\n          />\n        ) : (\n          <SendSwapDialog\n            key={tab}\n            onClose={onClose}\n            publicKey={publicKey}\n            balanceInfo={balanceInfo}\n            swapCoinInfo={swapCoinInfo}\n            ethAccount={ethAccount}\n            onSubmitRef={onSubmitRef}\n          />\n        )}\n      </DialogForm>\n      {ethAccount &&\n      (swapCoinInfo?.blockchain === 'eth' || swapCoinInfo?.erc20Contract) ? (\n        <EthWithdrawalCompleter ethAccount={ethAccount} publicKey={publicKey} />\n      ) : null}\n    </>\n  );\n}\n\nfunction SendSplDialog({ onClose, publicKey, balanceInfo, onSubmitRef }) {\n  const defaultAddressHelperText =\n    !balanceInfo.mint || balanceInfo.mint.equals(WRAPPED_GEMA_MINT)\n      ? 'Enter Solana Address'\n      : 'Enter GPL token or Solana address';\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [addressHelperText, setAddressHelperText] = useState(\n    defaultAddressHelperText,\n  );\n  const [passValidation, setPassValidation] = useState();\n  const [overrideDestinationCheck, setOverrideDestinationCheck] = useState(\n    false,\n  );\n  const [shouldShowOverride, setShouldShowOverride] = useState();\n  let {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    validAmount,\n  } = useForm(balanceInfo, addressHelperText, passValidation);\n  const { decimals, mint } = balanceInfo;\n  const mintString = mint && mint.toBase58();\n  const [isDomainName, setIsDomainName] = useState(false);\n  const [domainOwner, setDomainOwner] = useState();\n\n  useEffect(() => {\n    (async () => {\n      if (destinationAddress.startsWith('@')) {\n        const twitterOwner = await resolveTwitterHandle(\n          wallet.connection,\n          destinationAddress.slice(1),\n        );\n        if (!twitterOwner) {\n          setAddressHelperText(`This Twitter handle is not registered`);\n          setPassValidation(undefined);\n          setShouldShowOverride(undefined);\n          return;\n        }\n        setIsDomainName(true);\n        setDomainOwner(twitterOwner);\n      }\n      if (destinationAddress.endsWith('.gema')) {\n        const domainOwner = await resolveDomainName(\n          wallet.connection,\n          destinationAddress.slice(0, -4),\n        );\n        if (!domainOwner) {\n          setAddressHelperText(`This domain name is not registered`);\n          setPassValidation(undefined);\n          setShouldShowOverride(undefined);\n          return;\n        }\n        setIsDomainName(true);\n        setDomainOwner(domainOwner);\n      }\n      if (!destinationAddress) {\n        setAddressHelperText(defaultAddressHelperText);\n        setPassValidation(undefined);\n        setShouldShowOverride(undefined);\n        return;\n      }\n      try {\n        const destinationAccountInfo = await wallet.connection.getAccountInfo(\n          new PublicKey(isDomainName ? domainOwner : destinationAddress),\n        );\n        setShouldShowOverride(false);\n\n        if (destinationAccountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n          const accountInfo = parseTokenAccountData(\n            destinationAccountInfo.data,\n          );\n          if (accountInfo.mint.toBase58() === mintString) {\n            setPassValidation(true);\n            setAddressHelperText('Address is a valid GPL token address');\n          } else {\n            setPassValidation(false);\n            setAddressHelperText('Destination address mint does not match');\n          }\n        } else {\n          setPassValidation(true);\n          setAddressHelperText(\n            `Destination is a Solana address: ${\n              isDomainName ? domainOwner : destinationAddress\n            }`,\n          );\n        }\n      } catch (e) {\n        console.log(`Received error validating address ${e}`);\n        setAddressHelperText(defaultAddressHelperText);\n        setShouldShowOverride(true);\n        setPassValidation(undefined);\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [destinationAddress, wallet, mintString, isDomainName, domainOwner]);\n  useEffect(() => {\n    return () => {\n      setOverrideDestinationCheck(false);\n    };\n  }, [setOverrideDestinationCheck]);\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(isDomainName ? domainOwner : destinationAddress),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      null,\n      overrideDestinationCheck,\n    );\n  }\n\n  const disabled = shouldShowOverride\n    ? !overrideDestinationCheck || sending || !validAmount\n    : sending || !validAmount;\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: onClose });\n  }\n  onSubmitRef.current = onSubmit;\n  return (\n    <>\n      <DialogContent>{fields}</DialogContent>\n      <DialogActions>\n        {shouldShowOverride && (\n          <div\n            style={{\n              'align-items': 'center',\n              display: 'flex',\n              'text-align': 'left',\n            }}\n          >\n            <b>This address has no funds. Are you sure it's correct?</b>\n            <Switch\n              checked={overrideDestinationCheck}\n              onChange={(e) => setOverrideDestinationCheck(e.target.checked)}\n              color=\"primary\"\n            />\n          </div>\n        )}\n        <Button onClick={onClose}>Cancel</Button>\n        <Button type=\"submit\" color=\"primary\" disabled={disabled}>\n          Send\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapDialog({\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapCoinInfo,\n  ethAccount,\n  wusdcToSplUsdc = false,\n  wusdtToSplUsdt = false,\n  usdcToSplWUsdc = false,\n  onSubmitRef,\n}) {\n  const wallet = useWallet();\n  const [sendTransaction, sending] = useSendTransaction();\n  const [signature, setSignature] = useState(null);\n  const {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  } = useForm(balanceInfo);\n\n  const { tokenName, decimals, mint } = balanceInfo;\n  const blockchain =\n    wusdcToSplUsdc || wusdtToSplUsdt || usdcToSplWUsdc\n      ? 'gema'\n      : swapCoinInfo.blockchain === 'gema'\n      ? 'eth'\n      : swapCoinInfo.blockchain;\n  const needMetamask = blockchain === 'eth';\n\n  const [ethBalance] = useAsyncData(\n    () => getErc20Balance(ethAccount),\n    'ethBalance',\n    {\n      refreshInterval: 2000,\n    },\n  );\n  const ethFeeData = useSwapApiGet(\n    blockchain === 'eth' &&\n      `fees/eth/${ethAccount}` +\n        (swapCoinInfo.erc20Contract ? '/' + swapCoinInfo.erc20Contract : ''),\n    { refreshInterval: 2000 },\n  );\n  const [ethFeeEstimate] = ethFeeData;\n  const insufficientEthBalance =\n    typeof ethBalance === 'number' &&\n    typeof ethFeeEstimate === 'number' &&\n    ethBalance < ethFeeEstimate;\n\n  useEffect(() => {\n    if (blockchain === 'eth' && ethAccount) {\n      setDestinationAddress(ethAccount);\n    }\n  }, [blockchain, ethAccount, setDestinationAddress]);\n\n  let splUsdcWalletAddress = useWalletAddressForMint(\n    wusdcToSplUsdc ? USDC_MINT : null,\n  );\n  let splUsdtWalletAddress = useWalletAddressForMint(\n    wusdtToSplUsdt ? USDT_MINT : null,\n  );\n  let splWUsdcWalletAddress = useWalletAddressForMint(\n    usdcToSplWUsdc ? WUSDC_MINT : null,\n  );\n  useEffect(() => {\n    if (wusdcToSplUsdc && splUsdcWalletAddress) {\n      setDestinationAddress(splUsdcWalletAddress);\n    } else if (wusdtToSplUsdt && splUsdtWalletAddress) {\n      setDestinationAddress(splUsdtWalletAddress);\n    } else if (usdcToSplWUsdc && splWUsdcWalletAddress) {\n      setDestinationAddress(splWUsdcWalletAddress);\n    }\n  }, [\n    setDestinationAddress,\n    wusdcToSplUsdc,\n    splUsdcWalletAddress,\n    wusdtToSplUsdt,\n    splUsdtWalletAddress,\n    usdcToSplWUsdc,\n    splWUsdcWalletAddress,\n  ]);\n\n  async function makeTransaction() {\n    let amount = Math.round(parseFloat(transferAmountString) * 10 ** decimals);\n    if (!amount || amount <= 0) {\n      throw new Error('Invalid amount');\n    }\n    const params = {\n      blockchain,\n      address: destinationAddress,\n      size: amount / 10 ** decimals,\n    };\n    if (blockchain === 'gema') {\n      params.coin = swapCoinInfo.splMint;\n    } else if (blockchain === 'eth') {\n      params.coin = swapCoinInfo.erc20Contract;\n    }\n    if (mint?.equals(WUSDC_MINT)) {\n      params.wusdcToUsdc = true;\n    } else if (mint?.equals(USDC_MINT)) {\n      if (usdcToSplWUsdc) {\n        params.usdcToWUsdc = true;\n        params.coin = WUSDC_MINT.toString();\n      }\n    } else if (mint?.equals(WUSDT_MINT)) {\n      params.wusdtToUsdt = true;\n    }\n    const swapInfo = await swapApiRequest('POST', 'swap_to', params);\n    if (swapInfo.blockchain !== 'gema') {\n      throw new Error('Unexpected blockchain');\n    }\n    return wallet.transferToken(\n      publicKey,\n      new PublicKey(swapInfo.address),\n      amount,\n      balanceInfo.mint,\n      decimals,\n      swapInfo.memo,\n    );\n  }\n\n  async function onSubmit() {\n    return sendTransaction(makeTransaction(), { onSuccess: setSignature });\n  }\n  onSubmitRef.current = onSubmit;\n\n  if (signature) {\n    return (\n      <SendSwapProgress\n        key={signature}\n        publicKey={publicKey}\n        signature={signature}\n        blockchain={blockchain}\n        onClose={onClose}\n      />\n    );\n  }\n  const bitcoinDisable =\n    blockchain === 'btc' ? parseFloat(transferAmountString) < 0.001 : false;\n  let sendButton = (\n    <Button\n      type=\"submit\"\n      color=\"primary\"\n      disabled={\n        sending ||\n        (needMetamask && !ethAccount) ||\n        !validAmount ||\n        insufficientEthBalance ||\n        bitcoinDisable\n      }\n    >\n      Send\n    </Button>\n  );\n\n  if (insufficientEthBalance) {\n    sendButton = (\n      <Tooltip\n        title=\"Insufficient ETH for withdrawal transaction fee\"\n        placement=\"top\"\n      >\n        <span>{sendButton}</span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <>\n      <DialogContent style={{ paddingTop: 16 }}>\n        <DialogContentText>\n          GPL {tokenName} can be converted to{' '}\n          {blockchain === 'eth' && swapCoinInfo.erc20Contract\n            ? 'ERC20'\n            : blockchain === 'gema' && swapCoinInfo.splMint\n            ? 'GPL'\n            : 'native'}{' '}\n          {swapCoinInfo.ticker}\n          {needMetamask ? ' via MetaMask' : null}.\n        </DialogContentText>\n        {blockchain === 'eth' && (\n          <DialogContentText>\n            Estimated withdrawal transaction fee:\n            <EthFeeEstimate\n              ethFeeData={ethFeeData}\n              insufficientEthBalance={insufficientEthBalance}\n            />\n          </DialogContentText>\n        )}\n        {needMetamask && !ethAccount ? <ConnectToMetamaskButton /> : fields}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Cancel</Button>\n        {sendButton}\n      </DialogActions>\n    </>\n  );\n}\n\nfunction SendSwapProgress({ publicKey, signature, onClose, blockchain }) {\n  const connection = useConnection();\n  const [swaps] = useSwapApiGet(`swaps_from/gema/${publicKey.toBase58()}`, {\n    refreshInterval: 1000,\n  });\n  const [confirms] = useAsyncData(\n    async () => {\n      const { value } = await connection.getSignatureStatus(signature);\n      return value?.confirmations;\n    },\n    [connection.getSignatureStatus, signature],\n    { refreshInterval: 2000 },\n  );\n\n  let step = 1;\n  let ethTxid = null;\n  for (let swap of swaps || []) {\n    const { deposit, withdrawal } = swap;\n    if (deposit.txid === signature) {\n      if (withdrawal.txid?.startsWith('0x')) {\n        step = 3;\n        ethTxid = withdrawal.txid;\n      } else if (withdrawal.txid && blockchain !== 'eth') {\n        step = 3;\n      } else {\n        step = 2;\n      }\n    }\n  }\n\n  return (\n    <>\n      <DialogContent>\n        <Stepper activeStep={step}>\n          <Step>\n            <StepLabel>Send Request</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Wait for Confirmations</StepLabel>\n          </Step>\n          <Step>\n            <StepLabel>Withdraw Funds</StepLabel>\n          </Step>\n        </Stepper>\n        {ethTxid ? (\n          <Typography variant=\"body2\" align=\"center\">\n            <Link\n              href={`https://etherscan.io/tx/${ethTxid}`}\n              target=\"_blank\"\n              rel=\"noopener\"\n            >\n              View on Etherscan\n            </Link>\n          </Typography>\n        ) : step < 3 ? (\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <div style={{ marginRight: 16 }}>\n              <CircularProgress />\n            </div>\n            {confirms ? (\n              <Typography>{confirms} / 35 Confirmations</Typography>\n            ) : (\n              <Typography>Transaction Pending</Typography>\n            )}\n          </div>\n        ) : null}\n        {!ethTxid && blockchain === 'eth' ? (\n          <DialogContentText style={{ marginTop: 16, marginBottom: 0 }}>\n            Please keep this window open. You will need to approve the request\n            on MetaMask to complete the transaction.\n          </DialogContentText>\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </>\n  );\n}\n\nfunction useForm(\n  balanceInfo,\n  addressHelperText,\n  passAddressValidation,\n  overrideValidation,\n) {\n  const [destinationAddress, setDestinationAddress] = useState('');\n  const [transferAmountString, setTransferAmountString] = useState('');\n  const { amount: balanceAmount, decimals, tokenSymbol } = balanceInfo;\n\n  const parsedAmount = parseFloat(transferAmountString) * 10 ** decimals;\n  const validAmount = parsedAmount > 0 && parsedAmount <= balanceAmount;\n\n  const fields = (\n    <>\n      <TextField\n        label=\"Recipient Address\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        value={destinationAddress}\n        onChange={(e) => setDestinationAddress(e.target.value.trim())}\n        helperText={addressHelperText}\n        id={\n          !passAddressValidation && passAddressValidation !== undefined\n            ? 'outlined-error-helper-text'\n            : undefined\n        }\n        error={!passAddressValidation && passAddressValidation !== undefined}\n      />\n      <TextField\n        label=\"Amount\"\n        fullWidth\n        variant=\"outlined\"\n        margin=\"normal\"\n        type=\"number\"\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <Button\n                onClick={() =>\n                  setTransferAmountString(\n                    balanceAmountToUserAmount(balanceAmount, decimals),\n                  )\n                }\n              >\n                MAX\n              </Button>\n              {tokenSymbol ? tokenSymbol : null}\n            </InputAdornment>\n          ),\n          inputProps: {\n            step: Math.pow(10, -decimals),\n          },\n        }}\n        value={transferAmountString}\n        onChange={(e) => setTransferAmountString(e.target.value.trim())}\n        helperText={\n          <span\n            onClick={() =>\n              setTransferAmountString(\n                balanceAmountToUserAmount(balanceAmount, decimals),\n              )\n            }\n          >\n            Max: {balanceAmountToUserAmount(balanceAmount, decimals)}\n          </span>\n        }\n      />\n    </>\n  );\n\n  return {\n    fields,\n    destinationAddress,\n    transferAmountString,\n    setDestinationAddress,\n    validAmount,\n  };\n}\n\nfunction balanceAmountToUserAmount(balanceAmount, decimals) {\n  return (balanceAmount / Math.pow(10, decimals)).toFixed(decimals);\n}\n\nfunction EthWithdrawalCompleter({ ethAccount, publicKey }) {\n  const [swaps] = useSwapApiGet(`swaps_from/gema/${publicKey.toBase58()}`, {\n    refreshInterval: 10000,\n  });\n  if (!swaps) {\n    return null;\n  }\n  return swaps.map((swap) => (\n    <EthWithdrawalCompleterItem\n      key={swap.deposit.txid}\n      ethAccount={ethAccount}\n      swap={swap}\n    />\n  ));\n}\n\nfunction EthWithdrawalCompleterItem({ ethAccount, swap }) {\n  const callAsync = useCallAsync();\n  const { withdrawal } = swap;\n  useEffect(() => {\n    if (\n      withdrawal.status === 'sent' &&\n      withdrawal.blockchain === 'eth' &&\n      withdrawal.txid &&\n      !withdrawal.txid.startsWith('0x') &&\n      withdrawal.txData\n    ) {\n      withdrawEth(ethAccount, withdrawal, callAsync);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [withdrawal.txid, withdrawal.status]);\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}