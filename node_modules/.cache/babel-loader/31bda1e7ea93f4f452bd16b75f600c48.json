{"ast":null,"code":"var _jsxFileName = \"/home/imentus/spl-token-wallet/src/components/DebugButtons.js\",\n    _s = $RefreshSig$();\n\nimport { refreshWalletPublicKeys, useBalanceInfo, useWallet } from '../utils/wallet';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { Account, CARATS_PER_GEMA } from '@solana/web3.js';\nimport { abbreviateAddress, sleep } from '../utils/utils';\nimport { refreshAccountInfo, useConnectionConfig, MAINNET_URL } from '../utils/connection';\nimport { createAndInitializeMint } from '../utils/tokens';\nimport { Tooltip, Button } from '@material-ui/core';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DebugButtons() {\n  _s();\n\n  const wallet = useWallet();\n  const updateTokenName = useUpdateTokenName();\n  const {\n    endpoint\n  } = useConnectionConfig();\n  const balanceInfo = useBalanceInfo(wallet.publicKey);\n  const [sendTransaction, sending] = useSendTransaction();\n  const callAsync = useCallAsync();\n  let {\n    amount\n  } = balanceInfo || {};\n\n  function requestAirdrop() {\n    callAsync(wallet.connection.requestAirdrop(wallet.publicKey, CARATS_PER_GEMA), {\n      onSuccess: async () => {\n        await sleep(5000);\n        refreshAccountInfo(wallet.connection, wallet.publicKey);\n      },\n      successMessage: 'Success! Please wait up to 30 seconds for the GEMA tokens to appear in your wallet.'\n    });\n  }\n\n  function mintTestToken() {\n    let mint = new Account();\n    updateTokenName(mint.publicKey, `Test Token ${abbreviateAddress(mint.publicKey)}`, `TEST${mint.publicKey.toBase58().slice(0, 2)}`);\n    sendTransaction(createAndInitializeMint({\n      connection: wallet.connection,\n      owner: wallet,\n      mint,\n      amount: 1000,\n      decimals: 2,\n      initialAccount: new Account()\n    }), {\n      onSuccess: () => refreshWalletPublicKeys(wallet)\n    });\n  }\n\n  const noSol = amount === 0;\n  const requestAirdropDisabled = endpoint === MAINNET_URL;\n  const spacing = 24;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      marginLeft: spacing\n    },\n    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n      title: requestAirdropDisabled ? 'Receive some devnet GEMA for free. Only enabled on the devnet' : 'Receive some devnet GEMA for free',\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: requestAirdrop,\n          disabled: requestAirdropDisabled,\n          children: \"Request Airdrop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      title: noSol ? 'Generate and receive balances in a new test token. Requires GEMA balance' : 'Generate and receive balances in a new test token',\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: mintTestToken,\n          disabled: sending || noSol,\n          style: {\n            marginLeft: spacing\n          },\n          children: \"Mint Test Token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DebugButtons, \"4zQGieBt9wULAP4uTR1SjMsmiio=\", false, function () {\n  return [useWallet, useUpdateTokenName, useConnectionConfig, useBalanceInfo, useSendTransaction, useCallAsync];\n});\n\n_c = DebugButtons;\n\nvar _c;\n\n$RefreshReg$(_c, \"DebugButtons\");","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/components/DebugButtons.js"],"names":["refreshWalletPublicKeys","useBalanceInfo","useWallet","useUpdateTokenName","useCallAsync","useSendTransaction","Account","CARATS_PER_GEMA","abbreviateAddress","sleep","refreshAccountInfo","useConnectionConfig","MAINNET_URL","createAndInitializeMint","Tooltip","Button","React","DebugButtons","wallet","updateTokenName","endpoint","balanceInfo","publicKey","sendTransaction","sending","callAsync","amount","requestAirdrop","connection","onSuccess","successMessage","mintTestToken","mint","toBase58","slice","owner","decimals","initialAccount","noSol","requestAirdropDisabled","spacing","display","marginLeft"],"mappings":"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","sourcesContent":["import {\n  refreshWalletPublicKeys,\n  useBalanceInfo,\n  useWallet,\n} from '../utils/wallet';\nimport { useUpdateTokenName } from '../utils/tokens/names';\nimport { useCallAsync, useSendTransaction } from '../utils/notifications';\nimport { Account, CARATS_PER_GEMA } from '@solana/web3.js';\nimport { abbreviateAddress, sleep } from '../utils/utils';\nimport {\n  refreshAccountInfo,\n  useConnectionConfig,\n  MAINNET_URL,\n} from '../utils/connection';\nimport { createAndInitializeMint } from '../utils/tokens';\nimport { Tooltip, Button } from '@material-ui/core';\nimport React from 'react';\n\nexport default function DebugButtons() {\n  const wallet = useWallet();\n  const updateTokenName = useUpdateTokenName();\n  const { endpoint } = useConnectionConfig();\n  const balanceInfo = useBalanceInfo(wallet.publicKey);\n  const [sendTransaction, sending] = useSendTransaction();\n  const callAsync = useCallAsync();\n\n  let { amount } = balanceInfo || {};\n\n  function requestAirdrop() {\n    callAsync(\n      wallet.connection.requestAirdrop(wallet.publicKey, CARATS_PER_GEMA),\n      {\n        onSuccess: async () => {\n          await sleep(5000);\n          refreshAccountInfo(wallet.connection, wallet.publicKey);\n        },\n        successMessage:\n          'Success! Please wait up to 30 seconds for the GEMA tokens to appear in your wallet.',\n      },\n    );\n  }\n\n  function mintTestToken() {\n    let mint = new Account();\n    updateTokenName(\n      mint.publicKey,\n      `Test Token ${abbreviateAddress(mint.publicKey)}`,\n      `TEST${mint.publicKey.toBase58().slice(0, 2)}`,\n    );\n    sendTransaction(\n      createAndInitializeMint({\n        connection: wallet.connection,\n        owner: wallet,\n        mint,\n        amount: 1000,\n        decimals: 2,\n        initialAccount: new Account(),\n      }),\n      { onSuccess: () => refreshWalletPublicKeys(wallet) },\n    );\n  }\n\n  const noSol = amount === 0;\n  const requestAirdropDisabled = endpoint === MAINNET_URL;\n  const spacing = 24;\n  return (\n    <div style={{ display: 'flex', marginLeft: spacing }}>\n      <Tooltip\n        title={\n          requestAirdropDisabled\n            ? 'Receive some devnet GEMA for free. Only enabled on the devnet'\n            : 'Receive some devnet GEMA for free'\n        }\n      >\n        <span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={requestAirdrop}\n            disabled={requestAirdropDisabled}\n          >\n            Request Airdrop\n          </Button>\n        </span>\n      </Tooltip>\n      <Tooltip\n        title={\n          noSol\n            ? 'Generate and receive balances in a new test token. Requires GEMA balance'\n            : 'Generate and receive balances in a new test token'\n        }\n      >\n        <span>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={mintTestToken}\n            disabled={sending || noSol}\n            style={{ marginLeft: spacing }}\n          >\n            Mint Test Token\n          </Button>\n        </span>\n      </Tooltip>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}