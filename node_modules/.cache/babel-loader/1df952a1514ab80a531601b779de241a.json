{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenInfoFromName = exports.getTokenInfoFromMint = exports.TOKEN_TLD = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst utils_1 = require(\"./utils\");\n\nconst state_1 = require(\"./state\");\n\nexports.TOKEN_TLD = new web3_js_1.PublicKey(\"6NSu2tci4apRKQtt257bAVcvqYjB3zV2H1dWo56vgpa6\");\n\nconst getTokenInfoFromMint = async (connection, mint) => {\n  const nameKey = await utils_1.getNameAccountKey(await utils_1.getHashedName(mint.toBase58()), undefined, exports.TOKEN_TLD);\n  const registry = await state_1.NameRegistryState.retrieve(connection, nameKey);\n\n  if (!registry.data) {\n    throw new Error(\"Invalid account data\");\n  }\n\n  return state_1.TokenData.deserialize(registry.data);\n};\n\nexports.getTokenInfoFromMint = getTokenInfoFromMint;\n\nconst getTokenInfoFromName = async (connection, name) => {\n  const reverseNameKey = await utils_1.getNameAccountKey(await utils_1.getHashedName(name), undefined, exports.TOKEN_TLD);\n  const reverseRegistry = await state_1.NameRegistryState.retrieve(connection, reverseNameKey);\n\n  if (!reverseRegistry.data) {\n    throw new Error(\"Invalid account data\");\n  }\n\n  const mint = new web3_js_1.PublicKey(state_1.Mint.deserialize(reverseRegistry.data).mint);\n  return await exports.getTokenInfoFromMint(connection, mint);\n};\n\nexports.getTokenInfoFromName = getTokenInfoFromName;","map":{"version":3,"sources":["../src/tokens.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEa,OAAA,CAAA,SAAA,GAAY,IAAI,SAAA,CAAA,SAAJ,CACvB,8CADuB,CAAZ;;AAIN,MAAM,oBAAoB,GAAG,OAClC,UADkC,EAElC,IAFkC,KAGhC;AACF,QAAM,OAAO,GAAG,MAAM,OAAA,CAAA,iBAAA,CACpB,MAAM,OAAA,CAAA,aAAA,CAAc,IAAI,CAAC,QAAL,EAAd,CADc,EAEpB,SAFoB,EAGpB,OAAA,CAAA,SAHoB,CAAtB;AAKA,QAAM,QAAQ,GAAG,MAAM,OAAA,CAAA,iBAAA,CAAkB,QAAlB,CAA2B,UAA3B,EAAuC,OAAvC,CAAvB;;AACA,MAAI,CAAC,QAAQ,CAAC,IAAd,EAAoB;AAClB,UAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,SAAO,OAAA,CAAA,SAAA,CAAU,WAAV,CAAsB,QAAQ,CAAC,IAA/B,CAAP;AACD,CAdM;;AAAM,OAAA,CAAA,oBAAA,GAAoB,oBAApB;;AAgBN,MAAM,oBAAoB,GAAG,OAClC,UADkC,EAElC,IAFkC,KAGhC;AACF,QAAM,cAAc,GAAG,MAAM,OAAA,CAAA,iBAAA,CAC3B,MAAM,OAAA,CAAA,aAAA,CAAc,IAAd,CADqB,EAE3B,SAF2B,EAG3B,OAAA,CAAA,SAH2B,CAA7B;AAKA,QAAM,eAAe,GAAG,MAAM,OAAA,CAAA,iBAAA,CAAkB,QAAlB,CAC5B,UAD4B,EAE5B,cAF4B,CAA9B;;AAIA,MAAI,CAAC,eAAe,CAAC,IAArB,EAA2B;AACzB,UAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,QAAM,IAAI,GAAG,IAAI,SAAA,CAAA,SAAJ,CAAc,OAAA,CAAA,IAAA,CAAK,WAAL,CAAiB,eAAe,CAAC,IAAjC,EAAuC,IAArD,CAAb;AACA,SAAO,MAAM,OAAA,CAAA,oBAAA,CAAqB,UAArB,EAAiC,IAAjC,CAAb;AACD,CAlBM;;AAAM,OAAA,CAAA,oBAAA,GAAoB,oBAApB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTokenInfoFromName = exports.getTokenInfoFromMint = exports.TOKEN_TLD = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst utils_1 = require(\"./utils\");\nconst state_1 = require(\"./state\");\nexports.TOKEN_TLD = new web3_js_1.PublicKey(\"6NSu2tci4apRKQtt257bAVcvqYjB3zV2H1dWo56vgpa6\");\nconst getTokenInfoFromMint = async (connection, mint) => {\n    const nameKey = await utils_1.getNameAccountKey(await utils_1.getHashedName(mint.toBase58()), undefined, exports.TOKEN_TLD);\n    const registry = await state_1.NameRegistryState.retrieve(connection, nameKey);\n    if (!registry.data) {\n        throw new Error(\"Invalid account data\");\n    }\n    return state_1.TokenData.deserialize(registry.data);\n};\nexports.getTokenInfoFromMint = getTokenInfoFromMint;\nconst getTokenInfoFromName = async (connection, name) => {\n    const reverseNameKey = await utils_1.getNameAccountKey(await utils_1.getHashedName(name), undefined, exports.TOKEN_TLD);\n    const reverseRegistry = await state_1.NameRegistryState.retrieve(connection, reverseNameKey);\n    if (!reverseRegistry.data) {\n        throw new Error(\"Invalid account data\");\n    }\n    const mint = new web3_js_1.PublicKey(state_1.Mint.deserialize(reverseRegistry.data).mint);\n    return await exports.getTokenInfoFromMint(connection, mint);\n};\nexports.getTokenInfoFromName = getTokenInfoFromName;\n//# sourceMappingURL=tokens.js.map"]},"metadata":{},"sourceType":"script"}