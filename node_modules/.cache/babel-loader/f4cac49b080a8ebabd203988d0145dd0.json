{"ast":null,"code":"var _jsxFileName = \"/home/imentus/spl-token-wallet/src/components/DepositDialog.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogForm from './DialogForm';\nimport { abbreviateAddress } from '../utils/utils';\nimport CopyableDisplay from './CopyableDisplay';\nimport { useGemachainExplorerUrlSuffix } from '../utils/connection';\nimport Typography from '@material-ui/core/Typography';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport tuple from 'immutable-tuple';\nimport { useCallAsync } from '../utils/notifications';\nimport { ConnectToMetamaskButton, getErc20Balance, swapErc20ToSpl, useEthAccount, estimateErc20SwapFees } from '../utils/swap/eth';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Link from '@material-ui/core/Link';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { DialogContentText, Tooltip } from '@material-ui/core';\nimport { EthFeeEstimate } from './EthFeeEstimate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DISABLED_MINTS = new Set(['ABE7D8RU1eHfCJWzHYZZeymeE8k9nPPXfqge2NQYyKoL']);\nexport default function DepositDialog(_ref) {\n  _s();\n\n  let {\n    open,\n    onClose,\n    publicKey,\n    balanceInfo,\n    swapInfo,\n    isAssociatedToken\n  } = _ref;\n  const ethAccount = useEthAccount();\n  const urlSuffix = useGemachainExplorerUrlSuffix();\n  const {\n    mint,\n    tokenName,\n    tokenSymbol,\n    owner\n  } = balanceInfo;\n  const [tab, setTab] = useState(0); // SwapInfos to ignore.\n\n  if (swapInfo && swapInfo.coin && swapInfo.coin.erc20Contract === '0x2b2e04bf86978b45bb2edf54aca876973bdd43c0') {\n    swapInfo = null;\n  }\n\n  let tabs = null;\n\n  if (swapInfo) {\n    let firstTab = `GPL ${tokenSymbol !== null && tokenSymbol !== void 0 ? tokenSymbol : swapInfo.coin.ticker}`;\n    let secondTab = swapInfo.coin.ticker;\n\n    if (!mint) {\n      firstTab = 'GEMA';\n    } else {\n      secondTab = `${swapInfo.coin.erc20Contract ? 'ERC20' : 'Native'} ${secondTab}`;\n    }\n\n    tabs = /*#__PURE__*/_jsxDEV(Tabs, {\n      value: tab,\n      variant: \"fullWidth\",\n      onChange: (e, value) => setTab(value),\n      textColor: \"primary\",\n      indicatorColor: \"primary\",\n      children: [/*#__PURE__*/_jsxDEV(Tab, {\n        label: firstTab\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), (!DISABLED_MINTS.has(mint && mint.toString()) || localStorage.getItem('sollet-private')) && /*#__PURE__*/_jsxDEV(Tab, {\n        label: secondTab\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 54\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n  const displaySolAddress = publicKey.equals(owner) || isAssociatedToken;\n  const depositAddressStr = displaySolAddress ? owner.toBase58() : publicKey.toBase58();\n  return /*#__PURE__*/_jsxDEV(DialogForm, {\n    open: open,\n    onClose: onClose,\n    maxWidth: \"sm\",\n    fullWidth: true,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: [\"Deposit \", tokenName !== null && tokenName !== void 0 ? tokenName : mint.toBase58(), tokenSymbol ? ` (${tokenSymbol})` : null, ethAccount && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"textSecondary\",\n          style: {\n            fontSize: '14px'\n          },\n          children: [\"Metamask connected: \", ethAccount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), tabs, /*#__PURE__*/_jsxDEV(DialogContent, {\n      style: {\n        paddingTop: 16\n      },\n      children: tab === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [!displaySolAddress && isAssociatedToken === false ? /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: [\"This address can only be used to receive\", ' ', tokenSymbol !== null && tokenSymbol !== void 0 ? tokenSymbol : abbreviateAddress(mint), \". Do not send GEMA to this address.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"b\", {\n            style: {\n              color: 'red'\n            },\n            children: \"WARNING\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), \": You are using a deprecated account type. Please migrate your tokens. Ideally, create a new wallet. If you send to this address from a poorly implemented wallet, you may burn tokens.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: [\"This address can be used to receive\", ' ', tokenSymbol !== null && tokenSymbol !== void 0 ? tokenSymbol : abbreviateAddress(mint), \".\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(CopyableDisplay, {\n          value: depositAddressStr,\n          label: 'Deposit Address',\n          autoFocus: true,\n          qrCode: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DialogContentText, {\n          variant: \"body2\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: `https://solscan.io/account/${depositAddressStr}` + urlSuffix,\n            target: \"_blank\",\n            rel: \"noopener\",\n            children: \"View on Solscan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(SolletSwapDepositAddress, {\n        balanceInfo: balanceInfo,\n        swapInfo: swapInfo,\n        ethAccount: ethAccount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DepositDialog, \"4LNjYIqw1iv8ofHJmRIzrVg84Wk=\", false, function () {\n  return [useEthAccount, useGemachainExplorerUrlSuffix];\n});\n\n_c = DepositDialog;\n\nfunction SolletSwapDepositAddress(_ref2) {\n  _s2();\n\n  let {\n    balanceInfo,\n    swapInfo,\n    ethAccount\n  } = _ref2;\n  const [ethBalance] = useAsyncData(() => getErc20Balance(ethAccount), 'ethBalance', {\n    refreshInterval: 2000\n  });\n  const ethFeeData = useAsyncData(swapInfo.coin && (() => estimateErc20SwapFees({\n    erc20Address: swapInfo.coin.erc20Contract,\n    swapAddress: swapInfo.address,\n    ethAccount\n  })), 'depositEthFee', {\n    refreshInterval: 2000\n  });\n\n  if (!swapInfo) {\n    return null;\n  }\n\n  const ethFeeEstimate = Array.isArray(ethFeeData[0]) ? ethFeeData[0].reduce((acc, elem) => acc + elem) : ethFeeData[0];\n  const insufficientEthBalance = typeof ethBalance === 'number' && typeof ethFeeEstimate === 'number' && ethBalance < ethFeeEstimate;\n  const {\n    blockchain,\n    address,\n    memo,\n    coin\n  } = swapInfo;\n  const {\n    mint,\n    tokenName\n  } = balanceInfo;\n\n  if (blockchain === 'btc' && memo === null) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: [\"Native BTC can be converted to GPL \", tokenName, \" by sending it to the following address:\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CopyableDisplay, {\n        value: address,\n        label: \"Native BTC Deposit Address\",\n        autoFocus: true,\n        qrCode: `bitcoin:${address}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  if (blockchain === 'eth') {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: [coin.erc20Contract ? 'ERC20' : 'Native', \" \", coin.ticker, \" can be converted to \", mint ? 'GPL' : 'native', \" \", tokenName, \" via MetaMask. To convert, you must already have GEMA in your wallet.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogContentText, {\n        children: [\"Estimated withdrawal transaction fee:\", /*#__PURE__*/_jsxDEV(EthFeeEstimate, {\n          ethFeeData: ethFeeData,\n          insufficientEthBalance: insufficientEthBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MetamaskDeposit, {\n        swapInfo: swapInfo,\n        insufficientEthBalance: insufficientEthBalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return null;\n}\n\n_s2(SolletSwapDepositAddress, \"t7qUg36TH/xAiVlriaqfdr8WALM=\", false, function () {\n  return [useAsyncData, useAsyncData];\n});\n\n_c2 = SolletSwapDepositAddress;\n\nfunction MetamaskDeposit(_ref3) {\n  _s3();\n\n  let {\n    swapInfo,\n    insufficientEthBalance\n  } = _ref3;\n  const ethAccount = useEthAccount();\n  const [amount, setAmount] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [status, setStatus] = useState(null);\n  const callAsync = useCallAsync();\n  const {\n    address: swapAddress,\n    memo: destination,\n    coin: {\n      erc20Contract: erc20Address,\n      ticker\n    }\n  } = swapInfo;\n  const [maxAmount, maxAmountLoaded] = useAsyncData(async () => {\n    if (ethAccount) {\n      var _swapInfo$maxSize;\n\n      return Math.min(await getErc20Balance(ethAccount, erc20Address), (_swapInfo$maxSize = swapInfo.maxSize) !== null && _swapInfo$maxSize !== void 0 ? _swapInfo$maxSize : Infinity);\n    }\n\n    return 0;\n  }, tuple(getErc20Balance, ethAccount, erc20Address));\n\n  if (!ethAccount) {\n    return /*#__PURE__*/_jsxDEV(ConnectToMetamaskButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 12\n    }, this);\n  }\n\n  async function submit() {\n    setSubmitted(true);\n    setStatus({\n      step: 0\n    });\n    await callAsync((async () => {\n      let parsedAmount = parseFloat(amount);\n\n      if (!parsedAmount || parsedAmount > maxAmount || parsedAmount <= 0) {\n        throw new Error('Invalid amount');\n      }\n\n      await swapErc20ToSpl({\n        ethAccount,\n        erc20Address,\n        swapAddress,\n        destination,\n        amount,\n        onStatusChange: e => setStatus(status => ({ ...status,\n          ...e\n        }))\n      });\n    })(), {\n      onError: () => setSubmitted(false)\n    });\n  }\n\n  if (!submitted) {\n    let convertButton = /*#__PURE__*/_jsxDEV(Button, {\n      color: \"primary\",\n      style: {\n        marginLeft: 8\n      },\n      onClick: submit,\n      disabled: insufficientEthBalance,\n      children: \"Convert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this);\n\n    if (insufficientEthBalance) {\n      convertButton = /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Insufficient ETH for withdrawal transaction fee\",\n        placement: \"top\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: convertButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        alignItems: 'baseline'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Amount\",\n        fullWidth: true,\n        variant: \"outlined\",\n        margin: \"normal\",\n        type: \"number\",\n        InputProps: {\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"end\",\n            children: ticker\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 15\n          }, this),\n          inputProps: {\n            step: 'any'\n          }\n        },\n        value: amount,\n        onChange: e => setAmount(e.target.value.trim()),\n        helperText: maxAmountLoaded ? /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => setAmount(maxAmount.toFixed(6)),\n          children: [\"Max: \", maxAmount.toFixed(6)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 15\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), convertButton]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Stepper, {\n      activeStep: status.step,\n      children: [/*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepLabel, {\n          children: \"Approve Conversion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepLabel, {\n          children: \"Send Funds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Step, {\n        children: /*#__PURE__*/_jsxDEV(StepLabel, {\n          children: \"Wait for Confirmations\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), status.step === 2 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginRight: 16\n          },\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [status.confirms ? /*#__PURE__*/_jsxDEV(Typography, {\n            children: [status.confirms, \" / 12 Confirmations\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Transaction Pending\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              href: `https://etherscan.io/tx/${status.txid}`,\n              target: \"_blank\",\n              rel: \"noopener\",\n              children: \"View on Etherscan\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : null]\n  }, void 0, true);\n}\n\n_s3(MetamaskDeposit, \"TCPfyD7sRAqrNzzklByy2n+jyz8=\", false, function () {\n  return [useEthAccount, useCallAsync, useAsyncData];\n});\n\n_c3 = MetamaskDeposit;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DepositDialog\");\n$RefreshReg$(_c2, \"SolletSwapDepositAddress\");\n$RefreshReg$(_c3, \"MetamaskDeposit\");","map":{"version":3,"sources":["/home/imentus/spl-token-wallet/src/components/DepositDialog.js"],"names":["React","useState","DialogTitle","DialogContent","DialogForm","abbreviateAddress","CopyableDisplay","useGemachainExplorerUrlSuffix","Typography","DialogActions","Button","useAsyncData","tuple","useCallAsync","ConnectToMetamaskButton","getErc20Balance","swapErc20ToSpl","useEthAccount","estimateErc20SwapFees","InputAdornment","TextField","Stepper","Step","StepLabel","CircularProgress","Link","Tabs","Tab","DialogContentText","Tooltip","EthFeeEstimate","DISABLED_MINTS","Set","DepositDialog","open","onClose","publicKey","balanceInfo","swapInfo","isAssociatedToken","ethAccount","urlSuffix","mint","tokenName","tokenSymbol","owner","tab","setTab","coin","erc20Contract","tabs","firstTab","ticker","secondTab","e","value","has","toString","localStorage","getItem","displaySolAddress","equals","depositAddressStr","toBase58","fontSize","paddingTop","color","SolletSwapDepositAddress","ethBalance","refreshInterval","ethFeeData","erc20Address","swapAddress","address","ethFeeEstimate","Array","isArray","reduce","acc","elem","insufficientEthBalance","blockchain","memo","MetamaskDeposit","amount","setAmount","submitted","setSubmitted","status","setStatus","callAsync","destination","maxAmount","maxAmountLoaded","Math","min","maxSize","Infinity","submit","step","parsedAmount","parseFloat","Error","onStatusChange","onError","convertButton","marginLeft","display","alignItems","endAdornment","inputProps","target","trim","toFixed","justifyContent","marginRight","confirms","txid"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogForm from './DialogForm';\nimport { abbreviateAddress } from '../utils/utils';\nimport CopyableDisplay from './CopyableDisplay';\nimport { useGemachainExplorerUrlSuffix } from '../utils/connection';\nimport Typography from '@material-ui/core/Typography';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Button from '@material-ui/core/Button';\nimport { useAsyncData } from '../utils/fetch-loop';\nimport tuple from 'immutable-tuple';\nimport { useCallAsync } from '../utils/notifications';\nimport {\n  ConnectToMetamaskButton,\n  getErc20Balance,\n  swapErc20ToSpl,\n  useEthAccount,\n  estimateErc20SwapFees,\n} from '../utils/swap/eth';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Link from '@material-ui/core/Link';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { DialogContentText, Tooltip } from '@material-ui/core';\nimport { EthFeeEstimate } from './EthFeeEstimate';\n\nconst DISABLED_MINTS = new Set(['ABE7D8RU1eHfCJWzHYZZeymeE8k9nPPXfqge2NQYyKoL']);\n\nexport default function DepositDialog({\n  open,\n  onClose,\n  publicKey,\n  balanceInfo,\n  swapInfo,\n  isAssociatedToken,\n}) {\n  const ethAccount = useEthAccount();\n  const urlSuffix = useGemachainExplorerUrlSuffix();\n  const { mint, tokenName, tokenSymbol, owner } = balanceInfo;\n  const [tab, setTab] = useState(0);\n\n  // SwapInfos to ignore.\n  if (swapInfo && swapInfo.coin && swapInfo.coin.erc20Contract === '0x2b2e04bf86978b45bb2edf54aca876973bdd43c0') {\n    swapInfo = null;\n  }\n\n  let tabs = null;\n  if (swapInfo) {\n    let firstTab = `GPL ${tokenSymbol ?? swapInfo.coin.ticker}`;\n    let secondTab = swapInfo.coin.ticker;\n    if (!mint) {\n      firstTab = 'GEMA';\n    } else {\n      secondTab = `${\n        swapInfo.coin.erc20Contract ? 'ERC20' : 'Native'\n      } ${secondTab}`;\n    }\n    tabs = (\n      <Tabs\n        value={tab}\n        variant=\"fullWidth\"\n        onChange={(e, value) => setTab(value)}\n        textColor=\"primary\"\n        indicatorColor=\"primary\"\n      >\n        <Tab label={firstTab} />\n        {(!DISABLED_MINTS.has(mint && mint.toString()) ||\n          localStorage.getItem('sollet-private')) && <Tab label={secondTab} />}\n      </Tabs>\n    );\n  }\n  const displaySolAddress = publicKey.equals(owner) || isAssociatedToken;\n  const depositAddressStr = displaySolAddress\n    ? owner.toBase58()\n    : publicKey.toBase58();\n  return (\n    <DialogForm open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\n      <DialogTitle>\n        Deposit {tokenName ?? mint.toBase58()}\n        {tokenSymbol ? ` (${tokenSymbol})` : null}\n        {ethAccount && (\n          <div>\n            <Typography color=\"textSecondary\" style={{ fontSize: '14px' }}>\n              Metamask connected: {ethAccount}\n            </Typography>\n          </div>\n        )}\n      </DialogTitle>\n      {tabs}\n      <DialogContent style={{ paddingTop: 16 }}>\n        {tab === 0 ? (\n          <>\n            {!displaySolAddress && isAssociatedToken === false ? (\n              <DialogContentText>\n                This address can only be used to receive{' '}\n                {tokenSymbol ?? abbreviateAddress(mint)}. Do not send GEMA to\n                this address.\n                <br />\n                <b style={{ color: 'red' }}>WARNING</b>: You are using a deprecated account type. Please migrate your tokens. Ideally, create a new wallet. If you send to this address from a poorly implemented wallet, you may burn tokens.\n              </DialogContentText>\n            ) : (\n              <DialogContentText>\n                This address can be used to receive{' '}\n                {tokenSymbol ?? abbreviateAddress(mint)}.\n              </DialogContentText>\n            )}\n            <CopyableDisplay\n              value={depositAddressStr}\n              label={'Deposit Address'}\n              autoFocus\n              qrCode\n            />\n            <DialogContentText variant=\"body2\">\n              <Link\n                href={\n                  `https://solscan.io/account/${depositAddressStr}` +\n                  urlSuffix\n                }\n                target=\"_blank\"\n                rel=\"noopener\"\n              >\n                View on Solscan\n              </Link>\n            </DialogContentText>\n          </>\n        ) : (\n          <SolletSwapDepositAddress\n            balanceInfo={balanceInfo}\n            swapInfo={swapInfo}\n            ethAccount={ethAccount}\n          />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose}>Close</Button>\n      </DialogActions>\n    </DialogForm>\n  );\n}\n\nfunction SolletSwapDepositAddress({ balanceInfo, swapInfo, ethAccount }) {\n  const [ethBalance] = useAsyncData(\n    () => getErc20Balance(ethAccount),\n    'ethBalance',\n    {\n      refreshInterval: 2000,\n    },\n  );\n\n  const ethFeeData = useAsyncData(\n    swapInfo.coin &&\n      (() =>\n        estimateErc20SwapFees({\n          erc20Address: swapInfo.coin.erc20Contract,\n          swapAddress: swapInfo.address,\n          ethAccount,\n        })),\n    'depositEthFee',\n    {\n      refreshInterval: 2000,\n    },\n  );\n\n  if (!swapInfo) {\n    return null;\n  }\n\n  const ethFeeEstimate = Array.isArray(ethFeeData[0])\n    ? ethFeeData[0].reduce((acc, elem) => acc + elem)\n    : ethFeeData[0];\n  const insufficientEthBalance =\n    typeof ethBalance === 'number' &&\n    typeof ethFeeEstimate === 'number' &&\n    ethBalance < ethFeeEstimate;\n\n  const { blockchain, address, memo, coin } = swapInfo;\n  const { mint, tokenName } = balanceInfo;\n\n  if (blockchain === 'btc' && memo === null) {\n    return (\n      <>\n        <DialogContentText>\n          Native BTC can be converted to GPL {tokenName} by sending it to the\n          following address:\n        </DialogContentText>\n        <CopyableDisplay\n          value={address}\n          label=\"Native BTC Deposit Address\"\n          autoFocus\n          qrCode={`bitcoin:${address}`}\n        />\n      </>\n    );\n  }\n\n  if (blockchain === 'eth') {\n    return (\n      <>\n        <DialogContentText>\n          {coin.erc20Contract ? 'ERC20' : 'Native'} {coin.ticker} can be\n          converted to {mint ? 'GPL' : 'native'} {tokenName} via MetaMask. To\n          convert, you must already have GEMA in your wallet.\n        </DialogContentText>\n        <DialogContentText>\n          Estimated withdrawal transaction fee:\n          <EthFeeEstimate\n            ethFeeData={ethFeeData}\n            insufficientEthBalance={insufficientEthBalance}\n          />\n        </DialogContentText>\n        <MetamaskDeposit\n          swapInfo={swapInfo}\n          insufficientEthBalance={insufficientEthBalance}\n        />\n      </>\n    );\n  }\n\n  return null;\n}\n\nfunction MetamaskDeposit({ swapInfo, insufficientEthBalance }) {\n  const ethAccount = useEthAccount();\n  const [amount, setAmount] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const [status, setStatus] = useState(null);\n  const callAsync = useCallAsync();\n\n  const {\n    address: swapAddress,\n    memo: destination,\n    coin: { erc20Contract: erc20Address, ticker },\n  } = swapInfo;\n\n  const [maxAmount, maxAmountLoaded] = useAsyncData(async () => {\n    if (ethAccount) {\n      return Math.min(\n        await getErc20Balance(ethAccount, erc20Address),\n        swapInfo.maxSize ?? Infinity,\n      );\n    }\n    return 0;\n  }, tuple(getErc20Balance, ethAccount, erc20Address));\n\n  if (!ethAccount) {\n    return <ConnectToMetamaskButton />;\n  }\n\n  async function submit() {\n    setSubmitted(true);\n    setStatus({ step: 0 });\n    await callAsync(\n      (async () => {\n        let parsedAmount = parseFloat(amount);\n\n        if (!parsedAmount || parsedAmount > maxAmount || parsedAmount <= 0) {\n          throw new Error('Invalid amount');\n        }\n        await swapErc20ToSpl({\n          ethAccount,\n          erc20Address,\n          swapAddress,\n          destination,\n          amount,\n          onStatusChange: (e) => setStatus((status) => ({ ...status, ...e })),\n        });\n      })(),\n      { onError: () => setSubmitted(false) },\n    );\n  }\n\n  if (!submitted) {\n    let convertButton = (\n      <Button\n        color=\"primary\"\n        style={{ marginLeft: 8 }}\n        onClick={submit}\n        disabled={insufficientEthBalance}\n      >\n        Convert\n      </Button>\n    );\n\n    if (insufficientEthBalance) {\n      convertButton = (\n        <Tooltip\n          title=\"Insufficient ETH for withdrawal transaction fee\"\n          placement=\"top\"\n        >\n          <span>{convertButton}</span>\n        </Tooltip>\n      );\n    }\n\n    return (\n      <div style={{ display: 'flex', alignItems: 'baseline' }}>\n        <TextField\n          label=\"Amount\"\n          fullWidth\n          variant=\"outlined\"\n          margin=\"normal\"\n          type=\"number\"\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">{ticker}</InputAdornment>\n            ),\n            inputProps: {\n              step: 'any',\n            },\n          }}\n          value={amount}\n          onChange={(e) => setAmount(e.target.value.trim())}\n          helperText={\n            maxAmountLoaded ? (\n              <span onClick={() => setAmount(maxAmount.toFixed(6))}>\n                Max: {maxAmount.toFixed(6)}\n              </span>\n            ) : null\n          }\n        />\n        {convertButton}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Stepper activeStep={status.step}>\n        <Step>\n          <StepLabel>Approve Conversion</StepLabel>\n        </Step>\n        <Step>\n          <StepLabel>Send Funds</StepLabel>\n        </Step>\n        <Step>\n          <StepLabel>Wait for Confirmations</StepLabel>\n        </Step>\n      </Stepper>\n      {status.step === 2 ? (\n        <>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            <div style={{ marginRight: 16 }}>\n              <CircularProgress />\n            </div>\n            <div>\n              {status.confirms ? (\n                <Typography>{status.confirms} / 12 Confirmations</Typography>\n              ) : (\n                <Typography>Transaction Pending</Typography>\n              )}\n              <Typography variant=\"body2\">\n                <Link\n                  href={`https://etherscan.io/tx/${status.txid}`}\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                >\n                  View on Etherscan\n                </Link>\n              </Typography>\n            </div>\n          </div>\n        </>\n      ) : null}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}